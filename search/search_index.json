{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Placa de expansi\u00f3n BEE Descripci\u00f3n general La BEE es una placa de expansi\u00f3n, dise\u00f1ada inicialmente para la primera versi\u00f3n de la Raspberry Pi , pero que pude ser utilizada con cualquiera de las versiones de este computador de una sola placa . Este complemento convierte a la Raspberry Pi en una suerte de entrenador econ\u00f3mico para estudiar distintas tem\u00e1ticas de varias titulaciones universitarias del \u00e1mbito de las TIC y la Electr\u00f3nica. Este equipo se ha utilizado con gran \u00e9xito para montar los puestos de laboratorio para varias asignaturas de distintas titulaciones del Departamento de Arquitectura de Computadores y Autom\u00e1tica de la Universidad Complutense de Madrid, limitando tanto el precio que el Departamento ha podido montar un puesto para cada estudiante, permitiendo que puedan llevarse a casa el material durante el curso para completar sus pr\u00e1cticas y/o profundizar en las materias implicadas. El uso de este material fue crucial para que los estudiantes pudi\u00e9sen realizar sus pr\u00e1cticas durante la pandemia de covid de 2019 y 2020. La placa BEE incorpora una serie de perif\u00e9ricos que son f\u00e1cilmente conectables a los pines GPIO de la raspberry pi. En lugar de proporcionar una conexi\u00f3n fija entre los perif\u00e9ricos y los GPIOS de del microcontrolador, es el usuario el que debe conectar cada uno de los perif\u00e9ricos a los pines deseados usando cables de puente dupont hembra-hembra o jumpers . Los pines de la raspberry pi se han dejado disponibles en distintas tiras de pines sobre la propia placa de expansi\u00f3n. En algunos casos se han colocado junto a los circuitos de algun perif\u00e9rico, debido a que la funcionalidad adicional de estos pines est\u00e1 relacionada con dicho perif\u00e9rico. Por ejemplo, los pines que proporcionan conexiones a los controladores hardware de PWM se han colocado junto al circuito del zumbador. Para esos casos la conexi\u00f3n entre el perif\u00e9rico y la raspberry pi puede hacerse de forma c\u00f3moda y sencilla usando jumpers. En todo momento se ha evitado que un pin pueda ser conectado a m\u00e1s de un dispositivo externo, para evitar cortocircuitos provocados por los estudiantes menos cuidadosos. Se han desarrollado hasta el momento dos versiones de la placa BEE. La primera versi\u00f3n (v1) es m\u00e1s peque\u00f1a y econ\u00f3mica, y contiene un conjunto m\u00e1s reducido de dispositivos pensados inicialmente para dar servicio a los laboratorios de un par de asignaturas del Grado de Ingenier\u00eda Electr\u00f3nica de Comunicaciones del Master de Nuevas Tecnolog\u00edas Electr\u00f3nicas y fot\u00f3nicas de la Facultad de CC. F\u00edsicas de la Universidad Complutense de Madrid. La segunda versi\u00f3n (v2) extiende el conjunto de dispositivos incluidos para ampliar el espectro de asignaturas que pueden sacar provecho de esta econ\u00f3mica y vers\u00e1til placa de expansi\u00f3n. Esta segunda versi\u00f3n ha empezado a utilizarse tambi\u00e9n en la Facultad de Inform\u00e1tica de la Universidad Complutense de Madrid en asignaturas de Rob\u00f3tica y Arquitectura Interna de Linux y Android. En ambas versiones, los pines etiquetados como Bx en la placa BEE, tanto en el esquem\u00e1tico como en la serigraf\u00eda sobre la propia pcb, se corresponden con los pines BCMx de la documentaci\u00f3n de Broadcom, tambi\u00e9n denotados como GPIOx en algunos sitios web, como por ejemplo en https://pinout.xyz/ . Los detalles de estos dos modelos se presentan en las pr\u00f3ximas secciones. BEE v1 La primera versi\u00f3n de la BEE incluye el siguiente conjunto b\u00e1sico de dispositivos: Un MCP3008. Se trata de un conversor anal\u00f3gico digital (ADC) de 10 bits con 8 canales. Su interfaz digital SPI puede ser conectada mediante 5 jumpers a los pines SPI de la Raspberry Pi por el canal CE0. Sockets para la conexi\u00f3n r\u00e1pida de sensores anal\u00f3gicos, que pueden ser conectados a las entradas de los canales del ADC mediante jumpers . Estos sensores pueden ser polarizados haciendo uso de la red de resistencias montada en la placa, escogi\u00e9ndose una alimentaci\u00f3n de 3.3 V o 5 V mediante un jumper . Un MCP4911. Se trata de un conversor digital anal\u00f3gico (DAC) de 10 bits, que tambi\u00e9n puede ser conectado al controlador SPI usando los mismos 5 jumpers , quedando conectado al canal CE1. 3 circuitos simples de pulsador, que pueden ser conectados a pines digitales de entrada del microcontrolador para recibir acciones de usuario. 3 circuitos simples de led polarizado, que pueden ser conectados a un pin GPIO del microntorlador para controlar el estado del led por software. Un conector para cables FTDI-232-R con conexi\u00f3n directa a los pines del puerto serie de la raspberry pi. Facilita la comunicaci\u00f3n serie desde un PC con la raspberry pi. Un conector para JTAG est\u00e1ndar de 20 pines, conectado a los pines de depuraci\u00f3n en circuito de la raspberry pi. 1 Zumbador piezoel\u00e9ctrico que puede ser conectado con jumpers a algunos de los pines pwm de la Raspberry PI. Estos dispositivos est\u00e1n incluidos para dar soporte al desarrollo de pr\u00e1cticas de las siguientes asignaturas del departamento de Arquitectura de Computadores y Autom\u00e1tica de la Universidad Complutense de Madrid: Estructura de Computadores: en la que se realizan pr\u00e1cticas de programaci\u00f3n de entrada salida bare-metal , usando pines digitales de entrada y salida, conectados a leds y pulsadores, manejo de puerto serie y conexi\u00f3n a dispositivos por SPI o I2C. Rob\u00f3tica: se utilizan sensores anal\u00f3gicos y digitales, ADC, DAC y controladores PWM. Rob\u00f3tica y Mecatr\u00f3nica: igual que en rob\u00f3tica, se usan sensores anal\u00f3gicos y digitales, ADC, DAC, motores, etc. Programaci\u00f3n de Nodos Sensores para Internet de las Cosas: se utilizan tambi\u00e9n sensores anal\u00f3gicos, temporizadores, controladores PWM, etc. Las siguientes im\u00e1genes muestran un modelo 3D de la BEE v1, una foto aislada de un montaje real de la placa y su conexi\u00f3n a la Raspberry Pi en el montaje utilizado el laboratorio del Grado de Ingenier\u00eda Electr\u00f3nica de Comunicaciones de la Universidad Complutense de Madrid: Como vemos, la BEE se conecta a la Raspberry Pi a trav\u00e9s de la tira de 2x20 pines J1, mediante un cable plano. La totalidad de los pines de la Raspberry quedan entonces accesibles al usuario a trav\u00e9s de otras tiras de pines. Los pines quedan distribuidos seg\u00fan su uso entre varias tiras de pines adicionales, algunas de ellas pr\u00f3ximas a los circuitos de perif\u00e9ricos que generalmente necesitar\u00e1n de dichos pines para su manejo y control. En estos casos la conexi\u00f3n entre el perif\u00e9rico y la raspberry pi se puede hacer de forma c\u00f3moda y sencilla utilizando jumpers. La siguiente figura muestra la disposici\u00f3n de las tiras de pines en la BEE v1, marcando en rojo las tiras que exponen los pines de la raspberry pi (etiquetados como Bx en la serigraf\u00eda). Como \u00fanica excepci\u00f3n, los pines B4, B22-B25 y B27, que deben usarse en el caso de realizar una depuraci\u00f3n en circuito con el controlador JTAG, est\u00e1n disponibles en la tira etiquetada en azul como JTAG. La siguiente figura muestra el esquem\u00e1tico de la primera versi\u00f3n de la placa BEE: Cada uno de los bloques de perif\u00e9ricos se explica y documenta m\u00e1s abajo, en las secciones correspondientes a cada uno de ellos. BEE v2 La segunda versi\u00f3n de la placa extiende los dispositivos incluidos para dar soporte a un mayor n\u00famero de asignaturas del Departamento de Arquitectura de Computadores y Autom\u00e1tica de la UCM, como por ejemplo Arquitectura Interna Linux y Android, d\u00f3nde se programan drivers para varios tipos de dispositivos en estos sistemas. Asimismo se incorpora una red de polarizaci\u00f3n mucho m\u00e1s vers\u00e1til, con el objetivo de facilitar la polarizaci\u00f3n de sensores anal\u00f3gicos que se quieran conectar a las entradas del ADC, proporcionando las resistencias de polarizaci\u00f3n m\u00e1s habituales, con posibilidad de combinarlas en serie o en paralelo, y microinterruptores para polarizar el conjunto a Gnd o Vcc. Concretamente, en esta versi\u00f3n de la placa se han a\u00f1adido a los dispositivos incluidos en la versi\u00f3n 1 la siguiente lista de perif\u00e9ricos: Un desplazador con buffer conectado a un display de 7 segmentos (con punto decimal), permite escribir en el display 7 segmentos desde la raspberry-pi usando pines gen\u00e9ricos de entrada y salida. Un led RGB polarizado, que puede ser operado desde la raspberry pi con pines gen\u00e9ricos de entrada salida. Una red de polarizaci\u00f3n de sensores, con micro interruptores y resistencias habituales para una polarizaci\u00f3n de sensores anal\u00f3gicos que quieran conectarse a las entradas del ADC. La siguiente imagen muestra un modelo 3D de la segunda iteraci\u00f3n de la placa: La siguiente figura muestra el esquem\u00e1tico de la primera versi\u00f3n de la placa BEE: Los bloques de perif\u00e9ricos se explican y documentan en las siguientes secciones. Alimentaci\u00f3n de perif\u00e9ricos Los perif\u00e9ricos con interfaz anal\u00f3gica (ADC y DAC) tienen una l\u00ednea de alimentaci\u00f3n separada del resto de componentes, Vdd, que puede ser conectada tanto a 3.3 V como a 5 V colocando un jumper en la tira de pines J14: Por ejemplo, si se van a manejar se\u00f1ales entre 0 y 3.3 V, nos interesar\u00e1 conectar Vdd a 3.3 V para usar los 10 bits del ADC para discretizar el rango de 0 a 3.3V, teniendo as\u00ed mayor precisi\u00f3n que si lo aliment\u00e1semos a 5 V. Del mismo modo, la tira J18 permite escoger 3.3 V o 5 V para la se\u00f1al Vcc, disponible para la polarizaci\u00f3n de sensores anal\u00f3gicos. Interruptores y leds La siguiente figura muestra el esquem\u00e1tico de este sencillo bloque de perif\u00e9ricos, que es com\u00fan para las dos versiones de la placa. Por un lado tenemos tres leds (D1-D3) con el c\u00e1todo conectado a GND. El \u00e1nodo de cada uno de ellos se conecta a una resistencia de polarizaci\u00f3n de 220 Ohmios, que tiene el otro terminal accesible en uno de los pines de la tira J4. Podemos as\u00ed usar un cable de puente dupont para conectar este terminal a un GPIO de la raspberry pi para controla por software el estado del led: si ponemos el pin a 1 (Vdd) pasar\u00e1 por el led una corriente de unos 7 mA ((3.3 - 1.8)/220 = 7 mA) y el led se encender\u00e1. Por otro lado, tenemos tres pulsadores de bot\u00f3n (SW1-SW3), con un terminal conectado a GND y el otro conectado a una resistencia que a su vez conecta a la alimentaci\u00f3n (3.3 V). El punto entre la resistencia y el pulsador se conecta a uno de los pines de la tira J4. Podemos conectar estos a un GPIO de la raspberry pi haciendo uso de nuevo de un cable dupont hembra-hembra. Si dicho GPIO se configura como entrada podremos usarlo para ver si el pulsador est\u00e1 pulsado (el valor le\u00eddo ser\u00e1 0) o sin pulsar (el valor le\u00eddo ser\u00e1 1). Siempre habr\u00e1 que tener en cuenta que en los cambios de estado se producir\u00e1n rebotes, debido principalmente a las oscilaciones mec\u00e1nicas del muelle incluido en el pulsador. Estos rebotes pueden ser filtrados con ayuda del controlador GPIO de la raspberry pi, y si es necesario, por software. Led RGB Este perif\u00e9rico s\u00f3lo est\u00e1 disponible en la BEE v2, su circuito se muestra a continuaci\u00f3n: Se trata de un led rgb , conectado en c\u00e1todo com\u00fan a tierra, mientras que los terminales de los 3 \u00e1nodos se conectan cada uno a una resistencia, cuyo otro terminal se expone a trav\u00e9s de la tira de pines J21. Podemos usar cables de puente dupont para conectar estos terminales a pines GPIO de la raspberry pi con el fin de controlar la intensidad de los canales Rojo Verde y Azul del led desde el microcontrolador (habitualmente generando se\u00f1ales PWM). Zumbador (Buzzer) Las dos versiones montan el mismo zumbador piezoel\u00e9ctrico ( datasheet ), pero el circuito completo cambia lig\u00e9ramente de una verisi\u00f3n a la otra. La siguiente figura muestra el esquem\u00e1tico del circuito en la versi\u00f3n 1 de la placa BEE. Como vemos, los terminales del zumbador se conectan a los dos pines centrales de una tira de pines 2x3 (J3), estando el resto de pines de la tira conectados a tierra (2) o a los GPIOS 18 (1), 13 (5) y 12 (6) de la raspberry pi. Como indica la web pinout.xyz , estos pines adicionales pueden configurarse con las funciones PWM0, PWM1 y PWM0 respectivamente, pudiendo as\u00ed polarizar el zumbador utilizando jumpers , como se explica m\u00e1s abajo. Este circuito se modific\u00f3 en la versi\u00f3n 2 de la placa, como muestra la siguiente figura. En este caso los terminales del zumbador se han conectado dir\u00e9ctamente a tierra y al terminal central de una tira de pines 1x3 (J3). Los pines restantes de esta tira se han conectado a los GPIOs 12 (PWM0) y 13 (PWM1) de la raspberry pi. En ambos versiones puede usarse un jumper para conectar el zumbador al pin 12 (PWM0) o el 13 (PWM1), y probar as\u00ed el uso del zumbador con se\u00f1ales PWM generadas con los cotroladores internos del microcontrolador. En la versi\u00f3n 1 de la placa deberemos usar otro jumper para conectar el otro extremo a tierra. Conversor Anal\u00f3gico Digital (ADC) En ambas versiones de la placa se monta un conversor anal\u00f3gico digital MCP3008 , con las siguientes caracter\u00edsticas: 10 bits de resoluci\u00f3n 8 canales de entrada Interfaz SPI Entrada independiente para el voltaje de referencia Los esquem\u00e1ticos de la conexi\u00f3n del ADC en las dos versiones de la placa se muestran y explican a continuaci\u00f3n. S\u00f3lo difieren en la conexi\u00f3n de las entradas anal\u00f3gicas, debido a la modificaci\u00f3n que se realiz\u00f3 en la red de polarizaci\u00f3n de sensores. En ambos casos, se debe conectar un voltaje de referencia al ADC antes de usarlo. Si no se dispone de un voltaje de precisi\u00f3n, la placa proporciona una forma sencilla de conectar la entrada Vref a la alimentaci\u00f3n Vdd del ADC. En la primera versi\u00f3n de la placa las entradas anal\u00f3gicas del ADC se conectan a una tira de pines 2x8 (J8), que por el otro lado est\u00e1 conectada a un socket 2x8 (J7), por el lado en el que se conectan unas resistencias de pull down de 220, 10 k, 15 k y 47 k ohmios. Por el otro lado del socket J7 los pines se conectan a la alimentaci\u00f3n anal\u00f3gica (Vcc). De esta forma, podemos conectar un sensor anal\u00f3gico de dos patas en el socket J7, quedando uno de sus terminales conectado a la tira J8 y a una resistencia de pull-down, y el otro a Vcc. Podemos entonces utilizar un jumper en J8 para conectar la salida del sensor a la entrada anal\u00f3gica correspondiente del ADC. Aunque este circuito permite conectar f\u00e1cilmente muchos sensores anal\u00f3gicos al ADC, tenemos ciertas limitaciones: S\u00f3lo podemos usar configuraciones que requieran una resistencia de pull-down. S\u00f3lo podemos escoger 4 valores para la resistencia de pull-down. Para salvar estas limitaciones se modific\u00f3 este circuito en la segunda versi\u00f3n de la placa. Se redefini\u00f3 la red de polarizaci\u00f3n para facilitar la conexi\u00f3n serie o paralelo de las resistencias incluidas, as\u00ed como su conexi\u00f3n como conjuto de pull-down o pull-up. Adem\u00e1s, el nuevo circuito de polarizaci\u00f3n introduce dos potenci\u00f3metros que nos permiten obtener resistencias de polarizaci\u00f3n m\u00e1s especiales. El esqum\u00e1tico se muestra a continuaci\u00f3n: Este circuito est\u00e1 pensado para conectar f\u00e1cilmente al ADC sensores anal\u00f3gicos de dos terminales, en los que uno de ellos debe ir conectado directamente a GND o Vcc, y el otro a una resistencia de pull up o pull down. La salida del sensor se toma entonces del terminal conectado a la resistencia. En estos casos, el sensor se conecta al socket J7, escogiendo la posici\u00f3n que lleve a la resistencia que necesitamos, y usando los micro interruptores de U3 y U4 para conectar a GND o VCC tanto el sensor como la resistencia seleccionada. La salida del sensor estar\u00e1 entonces disponible en la tira de pines J15, y podemos usar un cable dupont hembra-hembra para conectarla a la entrada del ADC deseada, disponible en J8. Si ninguna de las resistencias que hay en el circuito es la resistencia que necesitamos, tenemos dos opciones: Conectar dos (o m\u00e1s) de las resistencias disponibles en serie o paralelo para obtener la resistencia deseada. Para ello podemos usar las tiras de pines J15 y J20, y en alg\u00fan caso un cable dupont. Usar los potenci\u00f3metros incluidos en la red de polarizaci\u00f3n, utilizando un destornillador peque\u00f1o para ajustarlo y un mult\u00edmetro para medir su valor. En ambas placas el interfaz digital del ADC est\u00e1 conectado a la tira de pines J2, que permite conectar con jumpers el ADC (y/o el DAC) a la raspberry pi, usando los GPIOs que corresponden al controlador SPI (el software debe configurar dichos gpios para esta funcionalidad). La siguiente figura muestra el esquem\u00e1tico de este conector: Conversor Digital Anal\u00f3gico (DAC) La placa BEE incorpora tambi\u00e9n un MCP4911 , un Conversor Digital Anal\u00f3gico (DAC) de 10 bits, que puede ser conectado tambi\u00e9n al controlador SPI a trav\u00e9s de la tira de pines J2 usando jumpers. El DAC queda conectado entonces al canal CE1. El esquem\u00e1tico es id\u00e9ntico en ambas versiones de la placa: Como pasaba con el ADC, debemos conectar un voltaje de referencia al DAC. Podemos colocar un jumper en J10 para conectar la entrada Vref a la tensi\u00f3n de alimentaci\u00f3n del DAC (VDD) si no tenemos una referencia de mayor precisi\u00f3n. Asimismo, el DAC dispone de una entrada LDAC, que debe ponerse a 0 V para cargar un nuevo valor en el registro de salida del DAC (consultar el Datasheet del componente). La placa BEE conecta esta entrada a la tira J9, de modo que puede usarse un jumper para conectarlo a 0 permanentemente o utilizar otro GPIO para activarlo por software cuando sea apropiado. El voltaje de salida del DAC est\u00e1 disponible en uno de los pines de la tira J12, estando el otro pin de la tira conectado a GND. Esto facilita la conexi\u00f3n de cualquier dispositivo que deba ser alimentado con la tensi\u00f3n generada con el DAC. Finalmente, como sucede con el ADC, el interfaz digital del DAC se puede conectar mediante jumpers a los GPIOs del controlador SPI de la raspberry pi utilizando el conector J2 (el software debe configurar dichos GPIOs para esta funcionalidad). Driver de display 7 segmentos Este perif\u00e9rico s\u00f3lo est\u00e1 disponible en la versi\u00f3n 2 de la placa BEE, su circuito es el siguiente: Como vemos, se compone principalmente de dos componentes: Un registro de desplazamiento 74AHC_AHCT595 Un display de 7 segmentos (m\u00e1s un punto decimal). El 74AHC595 utiliza doble buffer. Tiene un registro de desplazamiento que permite cargar en 8 ciclos de la se\u00f1al SRCLK un valor de 8 bits enviado en serie por la entrada serie (SER), y un registro de salida, que mantiene inalterado un valor de 8 bits mientras se carga un nuevo valor en el registro de desplazamiento. El valor almacenado en el registro de salida (QA-QH) se conecta a las entradas del display 7 segmentos (A-G, DP) a trav\u00e9s de 8 resistencias de 220 ohmios para limitar la corriente. El display mostrar\u00e1 el digito codificado en estos 8 bits (cada bit indica si se debe encender o no uno de los segmentos). El display es activo en alta, es decir, que un 1 en la entrada A indica que debe encenderse el segmento A (ve el s\u00edmbolo del esquem\u00e1tico), mientras que un 0 en dicha entrada indicar\u00eda que debe apagarse dicho segmento. Como la entrada de habilitaci\u00f3n de la salida (nOE) est\u00e1 conectada a GND, la salida est\u00e1 permanentemente habilitada. La se\u00f1al nSRCLR (nMR en el datasheet) permite resetear los biestables del registro de desplazamiento. Est\u00e1 conectada permanentemente a 1 (no se pueden resetear). El resto de se\u00f1ales (SER, SRCLK y RCLK) se conectan a la tira de pines J6, y podemos usar cables de puente dupont para conectarlos a los pines GPIO que queramos. El funcionamiento del dispositivo es como sigue. Los bits se van cargando en serie en el registro de desplazamiento. Cuando generamos un pulso en la se\u00f1al SRCLK, el valor en la entrada serie SER se carge en el biestable 0, el biestable 1 cargar\u00e1 el valor que ten\u00eda antes el biestable 0, el biestable 2 el valor que ten\u00eda antes el 1 y as\u00ed sucesivamente. La salida QH' nos permite conectar en serie otro 74H595 para almacenar valores de m\u00e1s de 8 bits. Cuando tengamos el valor completo cargado (8 bits), podemos generar un pulso en la se\u00f1al RCLK para cargar los biestables del registro de salida con el contenido almacenado en el registro de desplazamiento. Esto nos permite ir cargando un nuevo valor sin alterar lo que se est\u00e1 mostrando en el display 7 segmentos, mostrando de golpe el nuevo valor cuando se hayan cargado los 8 nuevos bits. Conector UART Se trata de una tira de pines (J13) con la configuraci\u00f3n adecuada para que podamos conectar un cable FTDI-232-R y usar el puerto serie de la mini-uart que incorpora la raspberry pi, ideal para proporcionar un terminal serie a cualquier aplicaci\u00f3n que corra en el microcontrolador. Conector JTAG Se trata de una tira de pines compatible un conector JTAG de 20 pines. La raspberry pi incorpora un controlado JTAG de depuraci\u00f3n en circuito. Se puede usar este controlador si se configura correctamente la funcionalidad de los pines BCM4, BCM22-25 y BCM27, que est\u00e1n rutados a las posiciones adecuadas de la tira de pines J5. Para usar el depurador debemos conectar un dongle JTAG de depuraci\u00f3n a J5, y usar un software como OpenOCD para establecer una sesi\u00f3n de depuraci\u00f3n.","title":"Placa de expansi\u00f3n BEE"},{"location":"#placa-de-expansion-bee","text":"","title":"Placa de expansi\u00f3n BEE"},{"location":"#descripcion-general","text":"La BEE es una placa de expansi\u00f3n, dise\u00f1ada inicialmente para la primera versi\u00f3n de la Raspberry Pi , pero que pude ser utilizada con cualquiera de las versiones de este computador de una sola placa . Este complemento convierte a la Raspberry Pi en una suerte de entrenador econ\u00f3mico para estudiar distintas tem\u00e1ticas de varias titulaciones universitarias del \u00e1mbito de las TIC y la Electr\u00f3nica. Este equipo se ha utilizado con gran \u00e9xito para montar los puestos de laboratorio para varias asignaturas de distintas titulaciones del Departamento de Arquitectura de Computadores y Autom\u00e1tica de la Universidad Complutense de Madrid, limitando tanto el precio que el Departamento ha podido montar un puesto para cada estudiante, permitiendo que puedan llevarse a casa el material durante el curso para completar sus pr\u00e1cticas y/o profundizar en las materias implicadas. El uso de este material fue crucial para que los estudiantes pudi\u00e9sen realizar sus pr\u00e1cticas durante la pandemia de covid de 2019 y 2020. La placa BEE incorpora una serie de perif\u00e9ricos que son f\u00e1cilmente conectables a los pines GPIO de la raspberry pi. En lugar de proporcionar una conexi\u00f3n fija entre los perif\u00e9ricos y los GPIOS de del microcontrolador, es el usuario el que debe conectar cada uno de los perif\u00e9ricos a los pines deseados usando cables de puente dupont hembra-hembra o jumpers . Los pines de la raspberry pi se han dejado disponibles en distintas tiras de pines sobre la propia placa de expansi\u00f3n. En algunos casos se han colocado junto a los circuitos de algun perif\u00e9rico, debido a que la funcionalidad adicional de estos pines est\u00e1 relacionada con dicho perif\u00e9rico. Por ejemplo, los pines que proporcionan conexiones a los controladores hardware de PWM se han colocado junto al circuito del zumbador. Para esos casos la conexi\u00f3n entre el perif\u00e9rico y la raspberry pi puede hacerse de forma c\u00f3moda y sencilla usando jumpers. En todo momento se ha evitado que un pin pueda ser conectado a m\u00e1s de un dispositivo externo, para evitar cortocircuitos provocados por los estudiantes menos cuidadosos. Se han desarrollado hasta el momento dos versiones de la placa BEE. La primera versi\u00f3n (v1) es m\u00e1s peque\u00f1a y econ\u00f3mica, y contiene un conjunto m\u00e1s reducido de dispositivos pensados inicialmente para dar servicio a los laboratorios de un par de asignaturas del Grado de Ingenier\u00eda Electr\u00f3nica de Comunicaciones del Master de Nuevas Tecnolog\u00edas Electr\u00f3nicas y fot\u00f3nicas de la Facultad de CC. F\u00edsicas de la Universidad Complutense de Madrid. La segunda versi\u00f3n (v2) extiende el conjunto de dispositivos incluidos para ampliar el espectro de asignaturas que pueden sacar provecho de esta econ\u00f3mica y vers\u00e1til placa de expansi\u00f3n. Esta segunda versi\u00f3n ha empezado a utilizarse tambi\u00e9n en la Facultad de Inform\u00e1tica de la Universidad Complutense de Madrid en asignaturas de Rob\u00f3tica y Arquitectura Interna de Linux y Android. En ambas versiones, los pines etiquetados como Bx en la placa BEE, tanto en el esquem\u00e1tico como en la serigraf\u00eda sobre la propia pcb, se corresponden con los pines BCMx de la documentaci\u00f3n de Broadcom, tambi\u00e9n denotados como GPIOx en algunos sitios web, como por ejemplo en https://pinout.xyz/ . Los detalles de estos dos modelos se presentan en las pr\u00f3ximas secciones.","title":"Descripci\u00f3n general"},{"location":"#bee-v1","text":"La primera versi\u00f3n de la BEE incluye el siguiente conjunto b\u00e1sico de dispositivos: Un MCP3008. Se trata de un conversor anal\u00f3gico digital (ADC) de 10 bits con 8 canales. Su interfaz digital SPI puede ser conectada mediante 5 jumpers a los pines SPI de la Raspberry Pi por el canal CE0. Sockets para la conexi\u00f3n r\u00e1pida de sensores anal\u00f3gicos, que pueden ser conectados a las entradas de los canales del ADC mediante jumpers . Estos sensores pueden ser polarizados haciendo uso de la red de resistencias montada en la placa, escogi\u00e9ndose una alimentaci\u00f3n de 3.3 V o 5 V mediante un jumper . Un MCP4911. Se trata de un conversor digital anal\u00f3gico (DAC) de 10 bits, que tambi\u00e9n puede ser conectado al controlador SPI usando los mismos 5 jumpers , quedando conectado al canal CE1. 3 circuitos simples de pulsador, que pueden ser conectados a pines digitales de entrada del microcontrolador para recibir acciones de usuario. 3 circuitos simples de led polarizado, que pueden ser conectados a un pin GPIO del microntorlador para controlar el estado del led por software. Un conector para cables FTDI-232-R con conexi\u00f3n directa a los pines del puerto serie de la raspberry pi. Facilita la comunicaci\u00f3n serie desde un PC con la raspberry pi. Un conector para JTAG est\u00e1ndar de 20 pines, conectado a los pines de depuraci\u00f3n en circuito de la raspberry pi. 1 Zumbador piezoel\u00e9ctrico que puede ser conectado con jumpers a algunos de los pines pwm de la Raspberry PI. Estos dispositivos est\u00e1n incluidos para dar soporte al desarrollo de pr\u00e1cticas de las siguientes asignaturas del departamento de Arquitectura de Computadores y Autom\u00e1tica de la Universidad Complutense de Madrid: Estructura de Computadores: en la que se realizan pr\u00e1cticas de programaci\u00f3n de entrada salida bare-metal , usando pines digitales de entrada y salida, conectados a leds y pulsadores, manejo de puerto serie y conexi\u00f3n a dispositivos por SPI o I2C. Rob\u00f3tica: se utilizan sensores anal\u00f3gicos y digitales, ADC, DAC y controladores PWM. Rob\u00f3tica y Mecatr\u00f3nica: igual que en rob\u00f3tica, se usan sensores anal\u00f3gicos y digitales, ADC, DAC, motores, etc. Programaci\u00f3n de Nodos Sensores para Internet de las Cosas: se utilizan tambi\u00e9n sensores anal\u00f3gicos, temporizadores, controladores PWM, etc. Las siguientes im\u00e1genes muestran un modelo 3D de la BEE v1, una foto aislada de un montaje real de la placa y su conexi\u00f3n a la Raspberry Pi en el montaje utilizado el laboratorio del Grado de Ingenier\u00eda Electr\u00f3nica de Comunicaciones de la Universidad Complutense de Madrid: Como vemos, la BEE se conecta a la Raspberry Pi a trav\u00e9s de la tira de 2x20 pines J1, mediante un cable plano. La totalidad de los pines de la Raspberry quedan entonces accesibles al usuario a trav\u00e9s de otras tiras de pines. Los pines quedan distribuidos seg\u00fan su uso entre varias tiras de pines adicionales, algunas de ellas pr\u00f3ximas a los circuitos de perif\u00e9ricos que generalmente necesitar\u00e1n de dichos pines para su manejo y control. En estos casos la conexi\u00f3n entre el perif\u00e9rico y la raspberry pi se puede hacer de forma c\u00f3moda y sencilla utilizando jumpers. La siguiente figura muestra la disposici\u00f3n de las tiras de pines en la BEE v1, marcando en rojo las tiras que exponen los pines de la raspberry pi (etiquetados como Bx en la serigraf\u00eda). Como \u00fanica excepci\u00f3n, los pines B4, B22-B25 y B27, que deben usarse en el caso de realizar una depuraci\u00f3n en circuito con el controlador JTAG, est\u00e1n disponibles en la tira etiquetada en azul como JTAG. La siguiente figura muestra el esquem\u00e1tico de la primera versi\u00f3n de la placa BEE: Cada uno de los bloques de perif\u00e9ricos se explica y documenta m\u00e1s abajo, en las secciones correspondientes a cada uno de ellos.","title":"BEE v1"},{"location":"#bee-v2","text":"La segunda versi\u00f3n de la placa extiende los dispositivos incluidos para dar soporte a un mayor n\u00famero de asignaturas del Departamento de Arquitectura de Computadores y Autom\u00e1tica de la UCM, como por ejemplo Arquitectura Interna Linux y Android, d\u00f3nde se programan drivers para varios tipos de dispositivos en estos sistemas. Asimismo se incorpora una red de polarizaci\u00f3n mucho m\u00e1s vers\u00e1til, con el objetivo de facilitar la polarizaci\u00f3n de sensores anal\u00f3gicos que se quieran conectar a las entradas del ADC, proporcionando las resistencias de polarizaci\u00f3n m\u00e1s habituales, con posibilidad de combinarlas en serie o en paralelo, y microinterruptores para polarizar el conjunto a Gnd o Vcc. Concretamente, en esta versi\u00f3n de la placa se han a\u00f1adido a los dispositivos incluidos en la versi\u00f3n 1 la siguiente lista de perif\u00e9ricos: Un desplazador con buffer conectado a un display de 7 segmentos (con punto decimal), permite escribir en el display 7 segmentos desde la raspberry-pi usando pines gen\u00e9ricos de entrada y salida. Un led RGB polarizado, que puede ser operado desde la raspberry pi con pines gen\u00e9ricos de entrada salida. Una red de polarizaci\u00f3n de sensores, con micro interruptores y resistencias habituales para una polarizaci\u00f3n de sensores anal\u00f3gicos que quieran conectarse a las entradas del ADC. La siguiente imagen muestra un modelo 3D de la segunda iteraci\u00f3n de la placa: La siguiente figura muestra el esquem\u00e1tico de la primera versi\u00f3n de la placa BEE: Los bloques de perif\u00e9ricos se explican y documentan en las siguientes secciones.","title":"BEE v2"},{"location":"#alimentacion-de-perifericos","text":"Los perif\u00e9ricos con interfaz anal\u00f3gica (ADC y DAC) tienen una l\u00ednea de alimentaci\u00f3n separada del resto de componentes, Vdd, que puede ser conectada tanto a 3.3 V como a 5 V colocando un jumper en la tira de pines J14: Por ejemplo, si se van a manejar se\u00f1ales entre 0 y 3.3 V, nos interesar\u00e1 conectar Vdd a 3.3 V para usar los 10 bits del ADC para discretizar el rango de 0 a 3.3V, teniendo as\u00ed mayor precisi\u00f3n que si lo aliment\u00e1semos a 5 V. Del mismo modo, la tira J18 permite escoger 3.3 V o 5 V para la se\u00f1al Vcc, disponible para la polarizaci\u00f3n de sensores anal\u00f3gicos.","title":"Alimentaci\u00f3n de perif\u00e9ricos"},{"location":"#interruptores-y-leds","text":"La siguiente figura muestra el esquem\u00e1tico de este sencillo bloque de perif\u00e9ricos, que es com\u00fan para las dos versiones de la placa. Por un lado tenemos tres leds (D1-D3) con el c\u00e1todo conectado a GND. El \u00e1nodo de cada uno de ellos se conecta a una resistencia de polarizaci\u00f3n de 220 Ohmios, que tiene el otro terminal accesible en uno de los pines de la tira J4. Podemos as\u00ed usar un cable de puente dupont para conectar este terminal a un GPIO de la raspberry pi para controla por software el estado del led: si ponemos el pin a 1 (Vdd) pasar\u00e1 por el led una corriente de unos 7 mA ((3.3 - 1.8)/220 = 7 mA) y el led se encender\u00e1. Por otro lado, tenemos tres pulsadores de bot\u00f3n (SW1-SW3), con un terminal conectado a GND y el otro conectado a una resistencia que a su vez conecta a la alimentaci\u00f3n (3.3 V). El punto entre la resistencia y el pulsador se conecta a uno de los pines de la tira J4. Podemos conectar estos a un GPIO de la raspberry pi haciendo uso de nuevo de un cable dupont hembra-hembra. Si dicho GPIO se configura como entrada podremos usarlo para ver si el pulsador est\u00e1 pulsado (el valor le\u00eddo ser\u00e1 0) o sin pulsar (el valor le\u00eddo ser\u00e1 1). Siempre habr\u00e1 que tener en cuenta que en los cambios de estado se producir\u00e1n rebotes, debido principalmente a las oscilaciones mec\u00e1nicas del muelle incluido en el pulsador. Estos rebotes pueden ser filtrados con ayuda del controlador GPIO de la raspberry pi, y si es necesario, por software.","title":"Interruptores y leds"},{"location":"#led-rgb","text":"Este perif\u00e9rico s\u00f3lo est\u00e1 disponible en la BEE v2, su circuito se muestra a continuaci\u00f3n: Se trata de un led rgb , conectado en c\u00e1todo com\u00fan a tierra, mientras que los terminales de los 3 \u00e1nodos se conectan cada uno a una resistencia, cuyo otro terminal se expone a trav\u00e9s de la tira de pines J21. Podemos usar cables de puente dupont para conectar estos terminales a pines GPIO de la raspberry pi con el fin de controlar la intensidad de los canales Rojo Verde y Azul del led desde el microcontrolador (habitualmente generando se\u00f1ales PWM).","title":"Led RGB"},{"location":"#zumbador-buzzer","text":"Las dos versiones montan el mismo zumbador piezoel\u00e9ctrico ( datasheet ), pero el circuito completo cambia lig\u00e9ramente de una verisi\u00f3n a la otra. La siguiente figura muestra el esquem\u00e1tico del circuito en la versi\u00f3n 1 de la placa BEE. Como vemos, los terminales del zumbador se conectan a los dos pines centrales de una tira de pines 2x3 (J3), estando el resto de pines de la tira conectados a tierra (2) o a los GPIOS 18 (1), 13 (5) y 12 (6) de la raspberry pi. Como indica la web pinout.xyz , estos pines adicionales pueden configurarse con las funciones PWM0, PWM1 y PWM0 respectivamente, pudiendo as\u00ed polarizar el zumbador utilizando jumpers , como se explica m\u00e1s abajo. Este circuito se modific\u00f3 en la versi\u00f3n 2 de la placa, como muestra la siguiente figura. En este caso los terminales del zumbador se han conectado dir\u00e9ctamente a tierra y al terminal central de una tira de pines 1x3 (J3). Los pines restantes de esta tira se han conectado a los GPIOs 12 (PWM0) y 13 (PWM1) de la raspberry pi. En ambos versiones puede usarse un jumper para conectar el zumbador al pin 12 (PWM0) o el 13 (PWM1), y probar as\u00ed el uso del zumbador con se\u00f1ales PWM generadas con los cotroladores internos del microcontrolador. En la versi\u00f3n 1 de la placa deberemos usar otro jumper para conectar el otro extremo a tierra.","title":"Zumbador (Buzzer)"},{"location":"#conversor-analogico-digital-adc","text":"En ambas versiones de la placa se monta un conversor anal\u00f3gico digital MCP3008 , con las siguientes caracter\u00edsticas: 10 bits de resoluci\u00f3n 8 canales de entrada Interfaz SPI Entrada independiente para el voltaje de referencia Los esquem\u00e1ticos de la conexi\u00f3n del ADC en las dos versiones de la placa se muestran y explican a continuaci\u00f3n. S\u00f3lo difieren en la conexi\u00f3n de las entradas anal\u00f3gicas, debido a la modificaci\u00f3n que se realiz\u00f3 en la red de polarizaci\u00f3n de sensores. En ambos casos, se debe conectar un voltaje de referencia al ADC antes de usarlo. Si no se dispone de un voltaje de precisi\u00f3n, la placa proporciona una forma sencilla de conectar la entrada Vref a la alimentaci\u00f3n Vdd del ADC. En la primera versi\u00f3n de la placa las entradas anal\u00f3gicas del ADC se conectan a una tira de pines 2x8 (J8), que por el otro lado est\u00e1 conectada a un socket 2x8 (J7), por el lado en el que se conectan unas resistencias de pull down de 220, 10 k, 15 k y 47 k ohmios. Por el otro lado del socket J7 los pines se conectan a la alimentaci\u00f3n anal\u00f3gica (Vcc). De esta forma, podemos conectar un sensor anal\u00f3gico de dos patas en el socket J7, quedando uno de sus terminales conectado a la tira J8 y a una resistencia de pull-down, y el otro a Vcc. Podemos entonces utilizar un jumper en J8 para conectar la salida del sensor a la entrada anal\u00f3gica correspondiente del ADC. Aunque este circuito permite conectar f\u00e1cilmente muchos sensores anal\u00f3gicos al ADC, tenemos ciertas limitaciones: S\u00f3lo podemos usar configuraciones que requieran una resistencia de pull-down. S\u00f3lo podemos escoger 4 valores para la resistencia de pull-down. Para salvar estas limitaciones se modific\u00f3 este circuito en la segunda versi\u00f3n de la placa. Se redefini\u00f3 la red de polarizaci\u00f3n para facilitar la conexi\u00f3n serie o paralelo de las resistencias incluidas, as\u00ed como su conexi\u00f3n como conjuto de pull-down o pull-up. Adem\u00e1s, el nuevo circuito de polarizaci\u00f3n introduce dos potenci\u00f3metros que nos permiten obtener resistencias de polarizaci\u00f3n m\u00e1s especiales. El esqum\u00e1tico se muestra a continuaci\u00f3n: Este circuito est\u00e1 pensado para conectar f\u00e1cilmente al ADC sensores anal\u00f3gicos de dos terminales, en los que uno de ellos debe ir conectado directamente a GND o Vcc, y el otro a una resistencia de pull up o pull down. La salida del sensor se toma entonces del terminal conectado a la resistencia. En estos casos, el sensor se conecta al socket J7, escogiendo la posici\u00f3n que lleve a la resistencia que necesitamos, y usando los micro interruptores de U3 y U4 para conectar a GND o VCC tanto el sensor como la resistencia seleccionada. La salida del sensor estar\u00e1 entonces disponible en la tira de pines J15, y podemos usar un cable dupont hembra-hembra para conectarla a la entrada del ADC deseada, disponible en J8. Si ninguna de las resistencias que hay en el circuito es la resistencia que necesitamos, tenemos dos opciones: Conectar dos (o m\u00e1s) de las resistencias disponibles en serie o paralelo para obtener la resistencia deseada. Para ello podemos usar las tiras de pines J15 y J20, y en alg\u00fan caso un cable dupont. Usar los potenci\u00f3metros incluidos en la red de polarizaci\u00f3n, utilizando un destornillador peque\u00f1o para ajustarlo y un mult\u00edmetro para medir su valor. En ambas placas el interfaz digital del ADC est\u00e1 conectado a la tira de pines J2, que permite conectar con jumpers el ADC (y/o el DAC) a la raspberry pi, usando los GPIOs que corresponden al controlador SPI (el software debe configurar dichos gpios para esta funcionalidad). La siguiente figura muestra el esquem\u00e1tico de este conector:","title":"Conversor Anal\u00f3gico Digital (ADC)"},{"location":"#conversor-digital-analogico-dac","text":"La placa BEE incorpora tambi\u00e9n un MCP4911 , un Conversor Digital Anal\u00f3gico (DAC) de 10 bits, que puede ser conectado tambi\u00e9n al controlador SPI a trav\u00e9s de la tira de pines J2 usando jumpers. El DAC queda conectado entonces al canal CE1. El esquem\u00e1tico es id\u00e9ntico en ambas versiones de la placa: Como pasaba con el ADC, debemos conectar un voltaje de referencia al DAC. Podemos colocar un jumper en J10 para conectar la entrada Vref a la tensi\u00f3n de alimentaci\u00f3n del DAC (VDD) si no tenemos una referencia de mayor precisi\u00f3n. Asimismo, el DAC dispone de una entrada LDAC, que debe ponerse a 0 V para cargar un nuevo valor en el registro de salida del DAC (consultar el Datasheet del componente). La placa BEE conecta esta entrada a la tira J9, de modo que puede usarse un jumper para conectarlo a 0 permanentemente o utilizar otro GPIO para activarlo por software cuando sea apropiado. El voltaje de salida del DAC est\u00e1 disponible en uno de los pines de la tira J12, estando el otro pin de la tira conectado a GND. Esto facilita la conexi\u00f3n de cualquier dispositivo que deba ser alimentado con la tensi\u00f3n generada con el DAC. Finalmente, como sucede con el ADC, el interfaz digital del DAC se puede conectar mediante jumpers a los GPIOs del controlador SPI de la raspberry pi utilizando el conector J2 (el software debe configurar dichos GPIOs para esta funcionalidad).","title":"Conversor Digital Anal\u00f3gico (DAC)"},{"location":"#driver-de-display-7-segmentos","text":"Este perif\u00e9rico s\u00f3lo est\u00e1 disponible en la versi\u00f3n 2 de la placa BEE, su circuito es el siguiente: Como vemos, se compone principalmente de dos componentes: Un registro de desplazamiento 74AHC_AHCT595 Un display de 7 segmentos (m\u00e1s un punto decimal). El 74AHC595 utiliza doble buffer. Tiene un registro de desplazamiento que permite cargar en 8 ciclos de la se\u00f1al SRCLK un valor de 8 bits enviado en serie por la entrada serie (SER), y un registro de salida, que mantiene inalterado un valor de 8 bits mientras se carga un nuevo valor en el registro de desplazamiento. El valor almacenado en el registro de salida (QA-QH) se conecta a las entradas del display 7 segmentos (A-G, DP) a trav\u00e9s de 8 resistencias de 220 ohmios para limitar la corriente. El display mostrar\u00e1 el digito codificado en estos 8 bits (cada bit indica si se debe encender o no uno de los segmentos). El display es activo en alta, es decir, que un 1 en la entrada A indica que debe encenderse el segmento A (ve el s\u00edmbolo del esquem\u00e1tico), mientras que un 0 en dicha entrada indicar\u00eda que debe apagarse dicho segmento. Como la entrada de habilitaci\u00f3n de la salida (nOE) est\u00e1 conectada a GND, la salida est\u00e1 permanentemente habilitada. La se\u00f1al nSRCLR (nMR en el datasheet) permite resetear los biestables del registro de desplazamiento. Est\u00e1 conectada permanentemente a 1 (no se pueden resetear). El resto de se\u00f1ales (SER, SRCLK y RCLK) se conectan a la tira de pines J6, y podemos usar cables de puente dupont para conectarlos a los pines GPIO que queramos. El funcionamiento del dispositivo es como sigue. Los bits se van cargando en serie en el registro de desplazamiento. Cuando generamos un pulso en la se\u00f1al SRCLK, el valor en la entrada serie SER se carge en el biestable 0, el biestable 1 cargar\u00e1 el valor que ten\u00eda antes el biestable 0, el biestable 2 el valor que ten\u00eda antes el 1 y as\u00ed sucesivamente. La salida QH' nos permite conectar en serie otro 74H595 para almacenar valores de m\u00e1s de 8 bits. Cuando tengamos el valor completo cargado (8 bits), podemos generar un pulso en la se\u00f1al RCLK para cargar los biestables del registro de salida con el contenido almacenado en el registro de desplazamiento. Esto nos permite ir cargando un nuevo valor sin alterar lo que se est\u00e1 mostrando en el display 7 segmentos, mostrando de golpe el nuevo valor cuando se hayan cargado los 8 nuevos bits.","title":"Driver de display 7 segmentos"},{"location":"#conector-uart","text":"Se trata de una tira de pines (J13) con la configuraci\u00f3n adecuada para que podamos conectar un cable FTDI-232-R y usar el puerto serie de la mini-uart que incorpora la raspberry pi, ideal para proporcionar un terminal serie a cualquier aplicaci\u00f3n que corra en el microcontrolador.","title":"Conector UART"},{"location":"#conector-jtag","text":"Se trata de una tira de pines compatible un conector JTAG de 20 pines. La raspberry pi incorpora un controlado JTAG de depuraci\u00f3n en circuito. Se puede usar este controlador si se configura correctamente la funcionalidad de los pines BCM4, BCM22-25 y BCM27, que est\u00e1n rutados a las posiciones adecuadas de la tira de pines J5. Para usar el depurador debemos conectar un dongle JTAG de depuraci\u00f3n a J5, y usar un software como OpenOCD para establecer una sesi\u00f3n de depuraci\u00f3n.","title":"Conector JTAG"},{"location":"control_servomotores/","text":"Control de servomotores con PWM En esta pr\u00e1ctica vamos a aprender como controlar un servomotor usando el generador de PWM de la Raspberry Pi, la placa BEE y la librer\u00eda wiringpi. Esta pr\u00e1ctica es parte de la asignatura de Rob\u00f3tica y Mecatr\u00f3nica del M\u00e1ster en Nuevas Tecnolog\u00edas Electr\u00f3nicas y Fot\u00f3nicas de la Universidad Complutense de Madrid. Es parte de un proyecto donde los alumnos crean desde cero su propia plataforma rob\u00f3tica m\u00f3vil. Servomotores Para la elecci\u00f3n de los servomotores se elegir\u00e1n dos servomotores del tipo Parallax Continous Rotation Servo. Estos servomotores tienen una velocidad m\u00e1xima de 50rpm son bidireccionales y de sencilla implementaci\u00f3n. La informaci\u00f3n proporcionada por el fabricante se puede consultar en la hoja de referencia disponible online ( Aqui ). ejemplos-practicas.md Se\u00f1al PWM Existen dos posibilidades de generar una se\u00f1al PWM usando la Raspberry Pi. La primera consiste en utilizar implementaciones software de librer\u00edas como WiringPi en donde el sistema operativo de la raspberry se utiliza para generar pulsos PWM. Este m\u00e9todo es propenso a errores de precisi\u00f3n debido a que el proceso debe compartir recursos con el resto de procesos de la Raspberry Pi. La segunda se basa en utilizar la implementaci\u00f3n hardware de la se\u00f1al PWM de la que dispone la Raspberry Pi. Este m\u00e9todo consiste en el uso de un reloj externo espec\u00edfico para la generaci\u00f3n de esta se\u00f1al. Al no depender del sistema operativo este m\u00e9todo suele ser mucho m\u00e1s preciso y el que se recomienda usar para el control de motores. En esta pr\u00e1ctica explicaremos la implementaci\u00f3n de la se\u00f1al usando el PWM hardware. PWM hardware Lo primero que hay que saber para trabajar con la se\u00f1al de PWM, es que el reloj disponible en la Raspberry Pi funciona a una frecuencia constante de 19.2 Mhz. Nuestro primero objetivo es adaptar esta frecuencia a la frecuencia de trabajo de nuestros servos. En nuestro caso, echando un vistazo al dataseet de los motores, vemos que el fabricante recomienda un periodo entre pulsos de 20ms. Esto equivale a una frecuencia de trabajo aproximada de 50Hz. Para definir esta frecuencia en la Raspberry Pi disponemos de dos par\u00e1metros: el divisor y el rango. El divisor nos permite escalar la frecuencia de trabajo del reloj. El rango nos define la resoluci\u00f3n de cada periodo de PWM y por lo tanto tambi\u00e9n la frecuencia m\u00e1xima que podremos conseguir. Configuraci\u00f3n de la Frecuencia PWM Para ajustar la frecuencia de la se\u00f1al PWM, utilizamos dos par\u00e1metros: Divisor ( D ) : Reduce la frecuencia del reloj de 19.2 MHz. Rango ( R ) : Define la resoluci\u00f3n del ciclo de trabajo y afecta la frecuencia resultante. La ecuaci\u00f3n para calcular la frecuencia PWM es: f_PWM = 19.2 MHz / (D \u00d7 R) Ejemplo para obtener 50 Hz : Divisor ( D ) = 1920 Rango ( R ) = 200 C\u00e1lculo: f_PWM = 19.2 MHz / (192 \u00d7 2000) = 50 Hz C\u00f3digo Para implementar la se\u00f1al PWM con la frecuencia indicada en el apartado anterior se puede utilizar el siguiente c\u00f3digo base. Este c\u00f3digo utiliza la biblioteca WiringPi para generar se\u00f1ales PWM y controlar la intensidad de giro de dos motores conectados a la Raspberry Pi. C\u00f3digo en C: #include <wiringPi.h> #include <stdio.h> #include <stdlib.h> // Definici\u00f3n de pines PWM seg\u00fan WiringPi const int PWM_pin_izda = 1; // Rueda izquierda (GPIO1 rasPi, BCM18/PWM0 en BEE) const int PWM_pin_dcha = 23; // Rueda derecha (GPIO23 raspi, BCM13/PWM1 en BEE) int main(void) { int intensidad; int rango = 200; // Rango del PWM (valor m\u00e1ximo de duty cycle) int divisor = 1920; // Factor de divisi\u00f3n del reloj PWM // Inicializaci\u00f3n de WiringPi if (wiringPiSetup() == -1) exit(1); // Configuraci\u00f3n del pin de salida PWM pinMode(PWM_pin_dcha, PWM_OUTPUT); pinMode(PWM_pin_izda, PWM_OUTPUT); // Configuraci\u00f3n del PWM por hardware pwmSetRange(rango); pwmSetClock(divisor); pwmSetMode(PWM_MODE_MS); while (1) { // Secuencia de movimiento con diferentes valores de PWM pwmWrite(PWM_pin_dcha, 13); pwmWrite(PWM_pin_izda, 17); printf(\"Moviendo a 17\\n\"); getchar(); pwmWrite(PWM_pin_dcha, 8); pwmWrite(PWM_pin_izda, 80); printf(\"Moviendo a 80\\n\"); getchar(); pwmWrite(PWM_pin_dcha, 6); pwmWrite(PWM_pin_izda, 130); printf(\"Moviendo a 130\\n\"); getchar(); pwmWrite(PWM_pin_dcha, 1); pwmWrite(PWM_pin_izda, 190); printf(\"Moviendo a 190\\n\"); getchar(); // Detener motores pwmWrite(PWM_pin_dcha, 0); pwmWrite(PWM_pin_izda, 0); getchar(); // Variaci\u00f3n gradual de la intensidad de PWM for (intensidad = 0; intensidad < rango; ++intensidad) { pwmWrite(PWM_pin_dcha, intensidad); delay(100); printf(\"Intensidad: %d\\n\", intensidad); } delay(1); for (intensidad = rango; intensidad >= 0; --intensidad) { pwmWrite(PWM_pin_dcha, intensidad); delay(100); printf(\"Intensidad: %d\\n\", intensidad); } delay(1); } } En este c\u00f3digo se realizan los siguientes pasos: 1. Se configura WiringPi para utilizar PWM por hardware. 2. Se definen los pines PWM para controlar dos ruedas. 3. Se establece un rango de 200 y un divisor de reloj de 1920. 4. En el bucle principal, se generan diferentes valores de PWM para simular movimientos de los motores cambiando cada valor con una pulsaci\u00f3n de teclado. 5. Luego, se realiza una variaci\u00f3n gradual de la intensidad de la se\u00f1al PWM. Conexiones con la placa BEE Una vez tenemos implementado el c\u00f3digo lo \u00fanico que nos quedar\u00eda ser\u00eda realizar las conexiones correspondientes entre la placa BEE y los servomotores para probar el movimiento de los mismos. La Raspberry Pi dispone de dos salidas PWM hardware correspondientes con los pines GPIO 1 y GPIO 23. Estos pines se corresponden en la placa BEE con los pines BCM18/PWM0 (rojo en la imagen de abajo) y BCM13/PWM1 (verde en la imagen de abajo) correspondientemente. A estos pines deberemos conectar el cable de control (cable blanco) de cada motor. Siguiendo lo especificado en el c\u00f3digo el motor izquierdo deber\u00e1 conectarse al PWM0 y el derecho al PWM1. Una vez hecho esto solo nos quedar\u00eda alimentar los servomotores a 5V siguiendo lo especificado por el fabricante. Para ello podemos usar una placa entrenador y una fuente de alimentaci\u00f3n externa (por ejemplo una power bank). De esta forma podemos crear una v\u00eda de alimentaci\u00f3n en en el entrenador en donde conectaremos nuestros motores. Por \u00faltimo, seguiremos el mismo procedimiento para las tierras. En este caso tendremos que asegurarnos que las tierras de ambos motores y la tierra de la placa BEE (conector azul en la imagen, entre otros) est\u00e1n conectadas al mismo punto para tener una referencia com\u00fan.","title":"Control de servomotores con PWM"},{"location":"control_servomotores/#control-de-servomotores-con-pwm","text":"En esta pr\u00e1ctica vamos a aprender como controlar un servomotor usando el generador de PWM de la Raspberry Pi, la placa BEE y la librer\u00eda wiringpi. Esta pr\u00e1ctica es parte de la asignatura de Rob\u00f3tica y Mecatr\u00f3nica del M\u00e1ster en Nuevas Tecnolog\u00edas Electr\u00f3nicas y Fot\u00f3nicas de la Universidad Complutense de Madrid. Es parte de un proyecto donde los alumnos crean desde cero su propia plataforma rob\u00f3tica m\u00f3vil.","title":"Control de servomotores con PWM"},{"location":"control_servomotores/#servomotores","text":"Para la elecci\u00f3n de los servomotores se elegir\u00e1n dos servomotores del tipo Parallax Continous Rotation Servo. Estos servomotores tienen una velocidad m\u00e1xima de 50rpm son bidireccionales y de sencilla implementaci\u00f3n. La informaci\u00f3n proporcionada por el fabricante se puede consultar en la hoja de referencia disponible online ( Aqui ). ejemplos-practicas.md","title":"Servomotores"},{"location":"control_servomotores/#senal-pwm","text":"Existen dos posibilidades de generar una se\u00f1al PWM usando la Raspberry Pi. La primera consiste en utilizar implementaciones software de librer\u00edas como WiringPi en donde el sistema operativo de la raspberry se utiliza para generar pulsos PWM. Este m\u00e9todo es propenso a errores de precisi\u00f3n debido a que el proceso debe compartir recursos con el resto de procesos de la Raspberry Pi. La segunda se basa en utilizar la implementaci\u00f3n hardware de la se\u00f1al PWM de la que dispone la Raspberry Pi. Este m\u00e9todo consiste en el uso de un reloj externo espec\u00edfico para la generaci\u00f3n de esta se\u00f1al. Al no depender del sistema operativo este m\u00e9todo suele ser mucho m\u00e1s preciso y el que se recomienda usar para el control de motores. En esta pr\u00e1ctica explicaremos la implementaci\u00f3n de la se\u00f1al usando el PWM hardware.","title":"Se\u00f1al PWM"},{"location":"control_servomotores/#pwm-hardware","text":"Lo primero que hay que saber para trabajar con la se\u00f1al de PWM, es que el reloj disponible en la Raspberry Pi funciona a una frecuencia constante de 19.2 Mhz. Nuestro primero objetivo es adaptar esta frecuencia a la frecuencia de trabajo de nuestros servos. En nuestro caso, echando un vistazo al dataseet de los motores, vemos que el fabricante recomienda un periodo entre pulsos de 20ms. Esto equivale a una frecuencia de trabajo aproximada de 50Hz. Para definir esta frecuencia en la Raspberry Pi disponemos de dos par\u00e1metros: el divisor y el rango. El divisor nos permite escalar la frecuencia de trabajo del reloj. El rango nos define la resoluci\u00f3n de cada periodo de PWM y por lo tanto tambi\u00e9n la frecuencia m\u00e1xima que podremos conseguir.","title":"PWM hardware"},{"location":"control_servomotores/#configuracion-de-la-frecuencia-pwm","text":"Para ajustar la frecuencia de la se\u00f1al PWM, utilizamos dos par\u00e1metros: Divisor ( D ) : Reduce la frecuencia del reloj de 19.2 MHz. Rango ( R ) : Define la resoluci\u00f3n del ciclo de trabajo y afecta la frecuencia resultante. La ecuaci\u00f3n para calcular la frecuencia PWM es: f_PWM = 19.2 MHz / (D \u00d7 R) Ejemplo para obtener 50 Hz : Divisor ( D ) = 1920 Rango ( R ) = 200 C\u00e1lculo: f_PWM = 19.2 MHz / (192 \u00d7 2000) = 50 Hz","title":"Configuraci\u00f3n de la Frecuencia PWM"},{"location":"control_servomotores/#codigo","text":"Para implementar la se\u00f1al PWM con la frecuencia indicada en el apartado anterior se puede utilizar el siguiente c\u00f3digo base. Este c\u00f3digo utiliza la biblioteca WiringPi para generar se\u00f1ales PWM y controlar la intensidad de giro de dos motores conectados a la Raspberry Pi.","title":"C\u00f3digo"},{"location":"control_servomotores/#codigo-en-c","text":"#include <wiringPi.h> #include <stdio.h> #include <stdlib.h> // Definici\u00f3n de pines PWM seg\u00fan WiringPi const int PWM_pin_izda = 1; // Rueda izquierda (GPIO1 rasPi, BCM18/PWM0 en BEE) const int PWM_pin_dcha = 23; // Rueda derecha (GPIO23 raspi, BCM13/PWM1 en BEE) int main(void) { int intensidad; int rango = 200; // Rango del PWM (valor m\u00e1ximo de duty cycle) int divisor = 1920; // Factor de divisi\u00f3n del reloj PWM // Inicializaci\u00f3n de WiringPi if (wiringPiSetup() == -1) exit(1); // Configuraci\u00f3n del pin de salida PWM pinMode(PWM_pin_dcha, PWM_OUTPUT); pinMode(PWM_pin_izda, PWM_OUTPUT); // Configuraci\u00f3n del PWM por hardware pwmSetRange(rango); pwmSetClock(divisor); pwmSetMode(PWM_MODE_MS); while (1) { // Secuencia de movimiento con diferentes valores de PWM pwmWrite(PWM_pin_dcha, 13); pwmWrite(PWM_pin_izda, 17); printf(\"Moviendo a 17\\n\"); getchar(); pwmWrite(PWM_pin_dcha, 8); pwmWrite(PWM_pin_izda, 80); printf(\"Moviendo a 80\\n\"); getchar(); pwmWrite(PWM_pin_dcha, 6); pwmWrite(PWM_pin_izda, 130); printf(\"Moviendo a 130\\n\"); getchar(); pwmWrite(PWM_pin_dcha, 1); pwmWrite(PWM_pin_izda, 190); printf(\"Moviendo a 190\\n\"); getchar(); // Detener motores pwmWrite(PWM_pin_dcha, 0); pwmWrite(PWM_pin_izda, 0); getchar(); // Variaci\u00f3n gradual de la intensidad de PWM for (intensidad = 0; intensidad < rango; ++intensidad) { pwmWrite(PWM_pin_dcha, intensidad); delay(100); printf(\"Intensidad: %d\\n\", intensidad); } delay(1); for (intensidad = rango; intensidad >= 0; --intensidad) { pwmWrite(PWM_pin_dcha, intensidad); delay(100); printf(\"Intensidad: %d\\n\", intensidad); } delay(1); } } En este c\u00f3digo se realizan los siguientes pasos: 1. Se configura WiringPi para utilizar PWM por hardware. 2. Se definen los pines PWM para controlar dos ruedas. 3. Se establece un rango de 200 y un divisor de reloj de 1920. 4. En el bucle principal, se generan diferentes valores de PWM para simular movimientos de los motores cambiando cada valor con una pulsaci\u00f3n de teclado. 5. Luego, se realiza una variaci\u00f3n gradual de la intensidad de la se\u00f1al PWM.","title":"C\u00f3digo en C:"},{"location":"control_servomotores/#conexiones-con-la-placa-bee","text":"Una vez tenemos implementado el c\u00f3digo lo \u00fanico que nos quedar\u00eda ser\u00eda realizar las conexiones correspondientes entre la placa BEE y los servomotores para probar el movimiento de los mismos. La Raspberry Pi dispone de dos salidas PWM hardware correspondientes con los pines GPIO 1 y GPIO 23. Estos pines se corresponden en la placa BEE con los pines BCM18/PWM0 (rojo en la imagen de abajo) y BCM13/PWM1 (verde en la imagen de abajo) correspondientemente. A estos pines deberemos conectar el cable de control (cable blanco) de cada motor. Siguiendo lo especificado en el c\u00f3digo el motor izquierdo deber\u00e1 conectarse al PWM0 y el derecho al PWM1. Una vez hecho esto solo nos quedar\u00eda alimentar los servomotores a 5V siguiendo lo especificado por el fabricante. Para ello podemos usar una placa entrenador y una fuente de alimentaci\u00f3n externa (por ejemplo una power bank). De esta forma podemos crear una v\u00eda de alimentaci\u00f3n en en el entrenador en donde conectaremos nuestros motores. Por \u00faltimo, seguiremos el mismo procedimiento para las tierras. En este caso tendremos que asegurarnos que las tierras de ambos motores y la tierra de la placa BEE (conector azul en la imagen, entre otros) est\u00e1n conectadas al mismo punto para tener una referencia com\u00fan.","title":"Conexiones con la placa BEE"},{"location":"gpio_linux/","text":"Control GPIO en Linux En esta pr\u00e1ctica utilizaremos los drivers que proporciona linux para controlar el GPIO. Puedes hacer esta pr\u00e1ctica si tienes una raspberry-pi con Raspbian, consiguiendo manejar dispositivos sencillos, como los pulsadores y los leds que incorpora la placa BEE, desde un programa de usuario escrito en C. Introducci\u00f3n Linux expone los controladores del GPIO como dispositivos orientados a caracteres /dev/gpiochip# . Usar estos dispositivos ofrece las siguientes ventajas: Portabilidad: el c\u00f3digo es pr\u00e1cticamente independiente del hardware, a excepci\u00f3n de los GPIOS/pines que hay que usar No requiere privilegios de root Ofrece un mecanismo para tratar eventos hw desde el espacio de usuario Mantiene la sem\u00e1ntica UNIX tradicional de todo es un fichero Como con cualquier otro dispositivo, podemos trabajar con el gpio como si fuese un fichero, utilizando las llamadas al sistema open() , read() , write() , ioctl() , close() . En esta pr\u00e1ctica usaremos la versi\u00f3n 2 del ABI, la 1 se considera obsoleta ( deprecated ). La fuente m\u00e1s fiable de referencia/documentaci\u00f3n es el propio fichero de cabecera /usr/include/linux/gpio.h . Utilidades de l\u00ednea de comandos La librer\u00eda libgpiod nos ofrece unos programas de ejemplo que podemos utilizar como utilidades de l\u00ednea de comandos para interactuar con los controladores de GPIO. Para disponer de estas herramientas debemos instalar algunos paquetes de raspbian: sudo apt install gpiod libgpiod-dev libgpiod-doc Una vez instalados estos paquetes tendremos disponibles las utilidades descritas en las siguientes secciones. gpiodetect Esta utilidad nos da una lista de los dispositivos de caracteres para control del gpio disponibles en nuestra plataforma: pi@raspberrypi:~ $ gpiodetect gpiochip0 [pinctrl-bcm2835] (54 lines) gpiochip1 [brcmvirt-gpio] (2 lines) gpiochip2 [raspberrypi-exp-gpio] (8 lines) pi@raspberrypi:~ $ gpioinfo Esta utilidad lista los pines controlados por uno de los controladores: pi@raspberrypi:~ $ gpioinfo gpiochip0 gpiochip0 - 54 lines: line 0: unnamed unused input active-high line 1: unnamed unused input active-high line 2: unnamed unused input active-high line 3: unnamed unused input active-high ... pi@raspberrypi:~ $ gpiofind Utilidad que nos da el n\u00famero de l\u00ednea de gpio para l\u00edneas identificadas con un nombre en el device-tree gpioset Utilidad que permite asignar un valor a un conjunto de l\u00edneas del gpio mientras ejecuta el comando. Con -m modo podemos configurar lo que hace el comando tras dar el valor a las l\u00edneas. Los posibles modos son: wait: espera a que el usuario pulse enter exit: termina inmediatamente time: duerme por el periodo de tiempo especificado con el flag -s o el flag -u signal: espera hasta recibir SIGINT o SIGTERM Por ejemplo, para encender 3 leds conectados a los pines 20, 21 y 26, hasta que el usuario pulse enter: pi@raspberrypi:~ $ gpioset -m wait 0 20=1 21=1 26=1 pi@raspberrypi:~ $ El siguiente script es un ejemplo de uso de gpioset que hace oscilar una luz entre tres leds. #!/bin/bash ini=0x01 dir=0 while true do bit26=$(( (ini & 0x4) >> 2 )) bit21=$(( (ini & 0x2) >> 1 )) bit20=$((ini & 0x1)) gpioset -m time -s 1 0 26=$bit26 21=$bit21 20=$bit20 if [ $dir -eq 0 ]; then ini=$(((ini << 1) & 0x7)) else ini=$(((ini >> 1) & 0x7)) fi if [ $ini -eq 0 ]; then dir=$(((dir + 1) & 1)) ini=0x2 fi done gpioget Esta utilidad nos da el estado actual de las l\u00edneas solicitadas en el chip de control indicado en la linea de comandos gpiomon Esta utilidad nos permite monitorizar el estado de unos pines. Usa la llamada al sistema poll , con las siguientes opciones: -n NUM: termina despu\u00e9s de \\texttt{NUM} eventos -s: no imprime informaci\u00f3n de evento -r: procesa s\u00f3lo eventos de flanco de subida -f: procesa s\u00f3lo eventos de flanco de bajada -F FMT: especifica el formato de salida (consulta la p\u00e1gina de manual) Por ejemplo, para monitorizar tres pulsadores conectados a las l\u00edneas 19, 6 y 5: pi@raspberrypi:~ $ gpiomon -f 0 19 6 5 event: FALLING EDGE offset: 19 timestamp: [ 2740.887807571] event: FALLING EDGE offset: 6 timestamp: [ 2742.291116096] event: FALLING EDGE offset: 5 timestamp: [ 2744.609921761] ^Cpi@raspberrypi:~ $ Driver GPIO Vamos a ver c\u00f3mo podemos manejar los pines del GPIO desde un programa de usuario escrito en C utilizando el driver de GPIO proporcionado por Linux. Para ello debemos comprender qu\u00e9 son las operaciones ioctl en el est\u00e1ndar POSIX, que ser\u00e1n vitales para la comunicaci\u00f3n con el driver. Luego iremos viendo como podemos utilizar estas operaciones para interactuar con el controlador GPIO. Operaciones ioctl En los sistemas POSIX las operaciones sobre un dispositivo que no sean read o write se realizan con la llamada al sistema ioctl , cuyo prototipo es: int ioctl(int fd, unsigned long request, void *argp); d\u00f3nde: fd : descriptor de fichero devuelto por open request : petici\u00f3n de operaci\u00f3n, dependiente del dispositivo. argp : direcci\u00f3n a un buffer que depende del tipo de operaci\u00f3n. No hay un est\u00e1ndar para los c\u00f3digos de las peticiones, pero un convenio que es ampliamente usado es el siguiente: Dos bits para indicar la direcci\u00f3n: 00 (nada), 01 (lectura), 10 (escritura) y 11 (lectura y escritura). 14 bits que indican el tama\u00f1o del dato pasado como argumento 8 bits de tipo de operaci\u00f3n 8 bits de n\u00famero de operaci\u00f3n El sistema define unas macros para ayudar a la codificaci\u00f3n de estas peticiones: _IOR(type, nr, arg), _IOW(type, nr, arg), _IOWR(type, nr, arg) e _IO(type, nr). Obtener informaci\u00f3n del controlador GPIO Para obtener informaci\u00f3n del controlador podemos utilizar la petici\u00f3n ioctl GPIO_GET_CHIP_INFO, que requiere como par\u00e1metro adicional la direcci\u00f3n de una estructura del siguiente tipo: struct gpiochip_info { char name[32]; /* Nombre del controlador en el kernel */ char label[32]; /* Nombre funcional, de producto */ __u32 lines; /* n\u00famero de l\u00edneas que maneja */ }; Un ejemplo de uso ser\u00eda el siguiente: int fd; struct gpiochip_info info; fd = open(\"/dev/gpiochip0\", O_RDONLY); ioctl(fd, GPIO_GET_CHIPINFO_IOCTL, &info); close(fd); printf(\"label: %s\\n\", info.label); printf(\"name: %s\\n\", info.name); printf(\"number of lines: %u\\n\", info.lines); Examinar el ejemplo gpio_info y comprobar su funcionamiento. Pines de entrada y salida El driver de GPIO nos permite agrupar pines en l\u00edneas , que pueden recibir un nombre l\u00f3gico definido por el programador(por ejemplo sevenseg). Para crear una de estas l\u00edneas de pines , una vez abierto el dispositivo, debemos hacer una petici\u00f3n ioctl de tipo line_request : struct gpio_v2_line_request req; ioctl(fd, GPIO_V2_GET_LINE_IOCTL, &req); El registro req tiene la siguiente estructura: struct gpio_v2_line_request { __u32 offsets[GPIO_V2_LINES_MAX]; //pines a manejar (in) char consumer[GPIO_MAX_NAME_SIZE]; //nombre por usuario (in) struct gpio_v2_line_config config; //configuraci\u00f3n (in) __u32 num_lines; //num pines en offsets (in) __u32 event_buffer_size; //para eventos (in) __u32 padding[5]; //no usado __s32 fd; //fd de salida (out) }; El campo offsets debe contener los n\u00fameros de los pines que pertenecen a la l\u00ednea, indicando el n\u00famero total de pines de la l\u00ednea en num_lines . El campo config se utiliza para indicar la configuraci\u00f3n de cada uno de los pines que pertenecen a la l\u00ednea. El campo fd es de salida, en el retorno de la llamada ioctl contendr\u00e1 un nuevo descriptor de fichero que podemos usar para operar sobre los pines de la l\u00ednea (leer, escribir, etc). El campo config tiene la siguiente estructura: struct gpio_v2_line_config { __aligned_u64 flags; // flags por defecto para los pines __u32 num_attrs; // n\u00famero de atributos en attrs __u32 padding[5]; // no usado struct gpio_v2_line_config_attribute attrs[GPIO_V2_LINE_NUM_ATTRS_MAX]; // array de atributos }; El campo flags permite establecer una configuraci\u00f3n por defecto para los pines de la l\u00ednes. Se trata de una m\u00e1scara de bits a la que se le debe asignar una combinaci\u00f3n, con or a nivel de bit (operadores bitwise ), de las siguientes macros: GPIO_V2_LINE_FLAG_USED GPIO_V2_LINE_FLAG_ACTIVE_LOW GPIO_V2_LINE_FLAG_INPUT GPIO_V2_LINE_FLAG_OUTPUT GPIO_V2_LINE_FLAG_EDGE_RISING GPIO_V2_LINE_FLAG_EDGE_FALLING GPIO_V2_LINE_FLAG_OPEN_DRAIN GPIO_V2_LINE_FLAG_OPEN_SOURCE GPIO_V2_LINE_FLAG_BIAS_PULL_UP GPIO_V2_LINE_FLAG_BIAS_PULL_DOWN GPIO_V2_LINE_FLAG_BIAS_DISABLED Los atributos de la l\u00ednea nos permiten cambiar la configuraci\u00f3n de un subconjunto de los pines de la l\u00ednea o indicar informaci\u00f3n complementaria a los flags necesaria para completar su configuraci\u00f3n (por ejemplo valor del pin en pines de salida). El campo attrs es un array de atributos definidos para la l\u00ednea, indicando el n\u00famero de atributos definidos en el campo num_attrs . Cada atributo se define con la siguiente estructura: struct gpio_v2_line_config_attribute { struct gpio_v2_line_attribute attr; //atributo __aligned_u64 mask; //pines a los que aplica }; El campo mask indica los pines de la linea afectados por el atributo, d\u00f3nde cada bit corresponde a un \u00edndice del array de offsets de la estructura struct gpio_v2_line_request . El campo attr se representa con la siguiente estructura: struct gpio_v2_line_attribute { __u32 id; //GPIO_V2_LINE_ATTR_ID_{FLAGS,OUTPUT_VALUES,DEBOUNCE} __u32 padding; union { __aligned_u64 flags; // flag __aligned_u64 values; // valor ini. 1-activo, 0-inactivo __u32 debounce_period_us;// tiempo de debounce }; }; El campo id indica el tipo de atributo, y su valor determina el campo de la uni\u00f3n que contiene la informaci\u00f3n correspondiente: GPIO_V2_LINE_ATTR_ID_FLAGS : aplicable a cualquier grupo de pines. El campo flags de la uni\u00f3n indica una configuraci\u00f3n alternativa para este grupo de pines. GPIO_V2_LINE_ATTR_ID_OUTPUT : aplicable a grupos de pines configurados como salida (por defecto o con atributos anteriores). El campo values de la uni\u00f3n indica el valor que se asigna a los pines afectados. GPIO_V2_LINE_ATTR_ID_DEBOUNCE : aplicable a pines configurados como entrada (por defecto o con atributos anteriores). El campo debounce_period_us de la uni\u00f3n indica el periodo en microsegundos con el que se muestrea el pin para eliminar rebotes (cualquier cambio m\u00e1s r\u00e1pido es filtrado). Para leer o escribir en los pines de la l\u00ednea debemos realizaremos nuevas operaciones ioctl sobre el descriptor de fichero inicializado en la operaci\u00f3n ioctl line_request . Para escribir un valor en pines configurados como salida usaremos la operaci\u00f3n ioctl GPIO_V2_LINE_SET_VALUES_IOCTL : struct gpio_v2_line_values values; ... ioctl(req.fd, GPIO_V2_LINE_SET_VALUES_IOCTL, &values); mientras que para leer utilizaremos la operaci\u00f3n GPIO_V2_LINE_GET_VALUES_IOCTL : struct gpio_v2_line_values values; ... ioctl(req.fd, GPIO_V2_LINE_GET_VALUES_IOCTL, &values); En ambos casos values tiene la siguiente estructura: struct gpio_v2_line_values { __aligned_u64 bits; //m\u00e1scara de bits con el valor los pines __aligned_u64 mask; //m\u00e1scara de bits que leer/escribir }; Cada bit de ambos campos se refiere a una de las posiciones del campo offsets de la l\u00ednea. Veamos un ejemplo. El programa gpio_blink_v2.c usa el driver de caracteres del GPIO para hacer parpadear los leds que se indican por la l\u00ednea de comandos, con un periodo de 0.5Hz (1 s encendidos, 1 s apagados). Podemos probar este programa en la raspberry, conectando tres pines a los tres leds de la placa BEE. Como ejercicio, se propone al estudiante modificar el c\u00f3digo del programa anterior para que de la sensaci\u00f3n de que una luz va pasando de un led a otro, dando la vuelta cuando llegue a los extremos. Eventos en pines de entrada El driver del GPIO convierte las interrupciones en los pines del GPIO en eventos software que se insertan en el descriptor de fichero (fd) asociado a la linea. Esto permite: Usar programaci\u00f3n multihilo, destiando un hilo a atender los eventos de entrada de la l\u00ednea. Usar mecanismos de multiplexaci\u00f3n de entrada/salida para monitorizar varios descriptores/l\u00edneas (uando select, poll o epoll). La detecci\u00f3n de eventos debe ser habilitada en los pines de entrada, a\u00f1adiendo uno los flags GPIO_V2_LINE_FLAG_EDGE_RISING y/o GPIO_V2_LINE_FLAG_EDGE_FALLING . Adem\u00e1s, se puede utilizar el atributo GPIO_V2_LINE_ATTR_ID_DEBOUNCE para configurar en el pin una eliminaci\u00f3n de rebotes. Por cada evento podremos leer del descriptor de fichero una estructura del tipo: struct gpio_v2_line_event { __aligned_u64 timestamp_ns; //Marca de tiempo del evento __u32 id; //Tipo de evento __u32 offset; //offset del pin correspondiente __u32 seqno; //n\u00fam. de secuencia global __u32 line_seqno; //n\u00fam. de secuencia en este pin __u32 padding[6]; //reservado }; d\u00f3nde el campo id nos identifica el evento detectado mientras que offset identifica el pin en el que se producido el evento. El campo seqno nos indica el \u00f3rden global en el que el evento se ha detectado, mientras que line_seqno nos indica el \u00f3rden entre los eventos de la l\u00ednea. El programa de ejemplo gpio_toggle.c usa el driver GPIO para controlar el estado de unos leds con unos pulsadores. El programa recibe como par\u00e1metros una lista con un n\u00famero par de pines. La primera mitad se configuran como pines entradas, activando la detecci\u00f3n de eventos por flancos de bajada, con un debounce de 10 ms. La segunda mitad se configuran como pines de salida, inicialmente activos (a 1). El programa se queda esperando por eventos de flanco de bajada en las entradas. Cuando se recibe un evento, se conmuta el estado del pin de salida correspondiente. El programa puede probarse conectando los 3 leds de la placa de expansi\u00f3n a 3 gpios (salidas) y los pulsadores a otros 3 gpios (entradas). Como ejercicio se propone al estudiante modificar el programa para que los pulsadores determinen si los leds parpadean o no. Es decir, inicialmente estar\u00e1n los 3 leds parpadeando a una frecuencia fija (por ejemplo 0.5 Hz), si se pulsa uno de los pulsadores el led correspondiente se quedar\u00e1 apagado. Si se vuelve a pulsar, el led volver\u00e1 a parpadear s\u00edncronamente con el resto. El dispositivo de caracteres GPIO soporta algunas operaciones ioctl adicionales: GPIO_V2_GET_LINEINFO_WATCH_IOCTL , monitorizar cambios en un l\u00ednea: Se pasa un argumento struct gpio_v2_line_info Se indican las l\u00edneas que se desean monitorizar Los eventos de cambio se obtinen del fd del gpiochip correspondiente GPIO_V2_LINE_SET_CONFIG_IOCTL , cambiar la configuraci\u00f3n de una l\u00ednea: Se pasa un argumento struct gpio_v2_line_config No es necesario liberar la l\u00ednea antes GPIO mapeado en memoria Linux incorpora el dispositivo /dev/mem que permite acceder a la memoria f\u00edsica del computador. El offset en este fichero es interpretado como una direcci\u00f3n f\u00edsica y el driver controla los rangos accesibles (configurable con la opci\u00f3n de compilaci\u00f3n del kernel CONFIG_STRICT_DEVMEM ) en funci\u00f3n de la arquitectura del computador. S\u00f3lo root tiene acceso a este dispositvo, ya que usarlo implica saltarse pr\u00e1cticamente todos los mecanismos de control y las abstracciones del sistema operativo. Raspbian incorpora tambi\u00e9n el dispositivo /dev/gpiomem, que es un dispositivo que permite el acceso al rango de direcciones f\u00edsicas controlado por el GPIO. Todos los usuarios que pertenezcan al grupo gpio tienen acceso a este fichero, adem\u00e1s de root. Este fichero permite acceder en crudo a los registros del gpio puenteando al driver gpio. Aunque no se recomienda su uso (mejor utilizar el driver gpio), puede ser \u00fatil usarlo para estudiar el funcionamiento del controlador gpio. Como ejemplo vamos a ver c\u00f3mo podemos implementar el ejemplo gpio_blink utilizando este dispositivo. Para ello primero debemos revisar la documentaci\u00f3n de Broadcom para ver c\u00f3mo funciona el controlador GPIO. Resumimos aqu\u00ed los aspectos m\u00e1s destacados. En el controlador GPIO la funci\u00f3n de cada pin se configura en los registros de selecci\u00f3n GPFSELn : Registro Dir. F\u00edsica Pines GPI GPFSEL0 0x3F200000 GPIO0 - GPIO9 GPFSEL1 0x3F200004 GPIO10 - GPIO19 GPFSEL2 0x3F200008 GPIO20 - GPIO29 GPFSEL3 0x3F20000C GPIO30 - GPIO39 GPFSEL4 0x3F200010 GPIO40 - GPIO49 GPFSEL5 0x3F200014 GPIO50 - GPIO53 Se utilizan tres bits por pin, con la codificaci\u00f3n indicada en la siguiente tabla: Funci\u00f3n (seg\u00fan doc. Broadcom ) 000 Entrada 001 Salida 100 Funci\u00f3n alternativa 0 101 Funci\u00f3n alternativa 1 110 Funci\u00f3n alternativa 2 111 Funci\u00f3n alternativa 3 011 Funci\u00f3n alternativa 4 010 Funci\u00f3n alternativa 5 Para operar sobre los pines de salida hay dos pares de registros: Valor Pin Registro Direcci\u00f3n (ARM) 1 0-31 GPFSET0 0x3F20001C 1 32-53 GPFSET1 0x3F200020 0 0-31 GPFCLR0 0x3F200028 0 32-53 GPFCLR1 0x3F20002C As\u00ed, para poner a 1 un pin de salida debemos escribir un 1 en la posici\u00f3n correspondiente del registro GPSET que corresponda. Y para poner dicho pin a 0 deberemos escribir un 1 en el la misma posici\u00f3n del registro GPCLR correspondiente. Escribir un 0 no modifica el valor del pin. El programa gpio_blink_mem proyectan el dispositivo /dev/gpiomem en el mapa virtual de memoria del proceso utilizando mmap, con el fin de acceder dir\u00e9ctamente a los registros del controlador. Se utilizan unos arrays para almacenar los offsets de los registros: uint32_t gpfsel_offset[] = {0x00,0x04,0x08,0x0C,0x10,0x14}; uint32_t gpfset_offset[] = {0x1C, 0x20}; uint32_t gpfclr_offset[] = {0x28, 0x2C}; Estos offsets se suman a la direcci\u00f3n base que es un puntero a byte, convirtiendo el resultado a un puntero a uint32_t por conveniencia: uint8_t *gpiomem; volatile uint32_t * fpsel; ... gpiomem = mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_SHARED, fd, 0x3f200000); ... n = get_int(argv[i+1], 10, desc); fpsel = (uint32_t *)(gpiomem + gpfsel_offset[n / 10]); Las escrituras en los registros se hacen desreferenciado los punteros, que se han declarado como vol\u00e1tiles: *fpsel |= (0x1 << (n % 10)*3); Aunque este mecanismo permite controlar los gpios, debemos notar que el c\u00f3digo es muy dependiente del hardware, utilizando offsets y selecciones de registros en funci\u00f3n del n\u00famero de pin o la operaci\u00f3n a realizar; y escogiendo adecuadamente los c\u00f3digos a escribir en los registros siguiendo la documentaci\u00f3n del fabricante del SoC. Notemos adem\u00e1s que el estado de los leds se mantiene cuando el programa termina, y puede entrar en conflicto con cualquier otro proceso que use el driver del sistema para el gpio. Este c\u00f3digo es mucho m\u00e1s propenso a errores que no ser\u00e1n identificados por el sistema (no hay valor de retorno de error). La librer\u00eda bcm2835 usa entrada salida mapeada en memoria y ofrece un API m\u00e1s sencillo y pr\u00e1ctico para el manejo de los controladores de la raspberry pi, pero sigue salt\u00e1ndose todos los controles del sistema operativo, por lo que resulta m\u00e1s adecuando aprender a utilizar el driver GPIO estudiado en la secci\u00f3n anterior.","title":"Control GPIO en Linux"},{"location":"gpio_linux/#control-gpio-en-linux","text":"En esta pr\u00e1ctica utilizaremos los drivers que proporciona linux para controlar el GPIO. Puedes hacer esta pr\u00e1ctica si tienes una raspberry-pi con Raspbian, consiguiendo manejar dispositivos sencillos, como los pulsadores y los leds que incorpora la placa BEE, desde un programa de usuario escrito en C.","title":"Control GPIO en Linux"},{"location":"gpio_linux/#introduccion","text":"Linux expone los controladores del GPIO como dispositivos orientados a caracteres /dev/gpiochip# . Usar estos dispositivos ofrece las siguientes ventajas: Portabilidad: el c\u00f3digo es pr\u00e1cticamente independiente del hardware, a excepci\u00f3n de los GPIOS/pines que hay que usar No requiere privilegios de root Ofrece un mecanismo para tratar eventos hw desde el espacio de usuario Mantiene la sem\u00e1ntica UNIX tradicional de todo es un fichero Como con cualquier otro dispositivo, podemos trabajar con el gpio como si fuese un fichero, utilizando las llamadas al sistema open() , read() , write() , ioctl() , close() . En esta pr\u00e1ctica usaremos la versi\u00f3n 2 del ABI, la 1 se considera obsoleta ( deprecated ). La fuente m\u00e1s fiable de referencia/documentaci\u00f3n es el propio fichero de cabecera /usr/include/linux/gpio.h .","title":"Introducci\u00f3n"},{"location":"gpio_linux/#utilidades-de-linea-de-comandos","text":"La librer\u00eda libgpiod nos ofrece unos programas de ejemplo que podemos utilizar como utilidades de l\u00ednea de comandos para interactuar con los controladores de GPIO. Para disponer de estas herramientas debemos instalar algunos paquetes de raspbian: sudo apt install gpiod libgpiod-dev libgpiod-doc Una vez instalados estos paquetes tendremos disponibles las utilidades descritas en las siguientes secciones.","title":"Utilidades de l\u00ednea de comandos"},{"location":"gpio_linux/#gpiodetect","text":"Esta utilidad nos da una lista de los dispositivos de caracteres para control del gpio disponibles en nuestra plataforma: pi@raspberrypi:~ $ gpiodetect gpiochip0 [pinctrl-bcm2835] (54 lines) gpiochip1 [brcmvirt-gpio] (2 lines) gpiochip2 [raspberrypi-exp-gpio] (8 lines) pi@raspberrypi:~ $","title":"gpiodetect"},{"location":"gpio_linux/#gpioinfo","text":"Esta utilidad lista los pines controlados por uno de los controladores: pi@raspberrypi:~ $ gpioinfo gpiochip0 gpiochip0 - 54 lines: line 0: unnamed unused input active-high line 1: unnamed unused input active-high line 2: unnamed unused input active-high line 3: unnamed unused input active-high ... pi@raspberrypi:~ $","title":"gpioinfo"},{"location":"gpio_linux/#gpiofind","text":"Utilidad que nos da el n\u00famero de l\u00ednea de gpio para l\u00edneas identificadas con un nombre en el device-tree","title":"gpiofind"},{"location":"gpio_linux/#gpioset","text":"Utilidad que permite asignar un valor a un conjunto de l\u00edneas del gpio mientras ejecuta el comando. Con -m modo podemos configurar lo que hace el comando tras dar el valor a las l\u00edneas. Los posibles modos son: wait: espera a que el usuario pulse enter exit: termina inmediatamente time: duerme por el periodo de tiempo especificado con el flag -s o el flag -u signal: espera hasta recibir SIGINT o SIGTERM Por ejemplo, para encender 3 leds conectados a los pines 20, 21 y 26, hasta que el usuario pulse enter: pi@raspberrypi:~ $ gpioset -m wait 0 20=1 21=1 26=1 pi@raspberrypi:~ $ El siguiente script es un ejemplo de uso de gpioset que hace oscilar una luz entre tres leds. #!/bin/bash ini=0x01 dir=0 while true do bit26=$(( (ini & 0x4) >> 2 )) bit21=$(( (ini & 0x2) >> 1 )) bit20=$((ini & 0x1)) gpioset -m time -s 1 0 26=$bit26 21=$bit21 20=$bit20 if [ $dir -eq 0 ]; then ini=$(((ini << 1) & 0x7)) else ini=$(((ini >> 1) & 0x7)) fi if [ $ini -eq 0 ]; then dir=$(((dir + 1) & 1)) ini=0x2 fi done","title":"gpioset"},{"location":"gpio_linux/#gpioget","text":"Esta utilidad nos da el estado actual de las l\u00edneas solicitadas en el chip de control indicado en la linea de comandos","title":"gpioget"},{"location":"gpio_linux/#gpiomon","text":"Esta utilidad nos permite monitorizar el estado de unos pines. Usa la llamada al sistema poll , con las siguientes opciones: -n NUM: termina despu\u00e9s de \\texttt{NUM} eventos -s: no imprime informaci\u00f3n de evento -r: procesa s\u00f3lo eventos de flanco de subida -f: procesa s\u00f3lo eventos de flanco de bajada -F FMT: especifica el formato de salida (consulta la p\u00e1gina de manual) Por ejemplo, para monitorizar tres pulsadores conectados a las l\u00edneas 19, 6 y 5: pi@raspberrypi:~ $ gpiomon -f 0 19 6 5 event: FALLING EDGE offset: 19 timestamp: [ 2740.887807571] event: FALLING EDGE offset: 6 timestamp: [ 2742.291116096] event: FALLING EDGE offset: 5 timestamp: [ 2744.609921761] ^Cpi@raspberrypi:~ $","title":"gpiomon"},{"location":"gpio_linux/#driver-gpio","text":"Vamos a ver c\u00f3mo podemos manejar los pines del GPIO desde un programa de usuario escrito en C utilizando el driver de GPIO proporcionado por Linux. Para ello debemos comprender qu\u00e9 son las operaciones ioctl en el est\u00e1ndar POSIX, que ser\u00e1n vitales para la comunicaci\u00f3n con el driver. Luego iremos viendo como podemos utilizar estas operaciones para interactuar con el controlador GPIO.","title":"Driver GPIO"},{"location":"gpio_linux/#operaciones-ioctl","text":"En los sistemas POSIX las operaciones sobre un dispositivo que no sean read o write se realizan con la llamada al sistema ioctl , cuyo prototipo es: int ioctl(int fd, unsigned long request, void *argp); d\u00f3nde: fd : descriptor de fichero devuelto por open request : petici\u00f3n de operaci\u00f3n, dependiente del dispositivo. argp : direcci\u00f3n a un buffer que depende del tipo de operaci\u00f3n. No hay un est\u00e1ndar para los c\u00f3digos de las peticiones, pero un convenio que es ampliamente usado es el siguiente: Dos bits para indicar la direcci\u00f3n: 00 (nada), 01 (lectura), 10 (escritura) y 11 (lectura y escritura). 14 bits que indican el tama\u00f1o del dato pasado como argumento 8 bits de tipo de operaci\u00f3n 8 bits de n\u00famero de operaci\u00f3n El sistema define unas macros para ayudar a la codificaci\u00f3n de estas peticiones: _IOR(type, nr, arg), _IOW(type, nr, arg), _IOWR(type, nr, arg) e _IO(type, nr).","title":"Operaciones ioctl"},{"location":"gpio_linux/#obtener-informacion-del-controlador-gpio","text":"Para obtener informaci\u00f3n del controlador podemos utilizar la petici\u00f3n ioctl GPIO_GET_CHIP_INFO, que requiere como par\u00e1metro adicional la direcci\u00f3n de una estructura del siguiente tipo: struct gpiochip_info { char name[32]; /* Nombre del controlador en el kernel */ char label[32]; /* Nombre funcional, de producto */ __u32 lines; /* n\u00famero de l\u00edneas que maneja */ }; Un ejemplo de uso ser\u00eda el siguiente: int fd; struct gpiochip_info info; fd = open(\"/dev/gpiochip0\", O_RDONLY); ioctl(fd, GPIO_GET_CHIPINFO_IOCTL, &info); close(fd); printf(\"label: %s\\n\", info.label); printf(\"name: %s\\n\", info.name); printf(\"number of lines: %u\\n\", info.lines); Examinar el ejemplo gpio_info y comprobar su funcionamiento.","title":"Obtener informaci\u00f3n del controlador GPIO"},{"location":"gpio_linux/#pines-de-entrada-y-salida","text":"El driver de GPIO nos permite agrupar pines en l\u00edneas , que pueden recibir un nombre l\u00f3gico definido por el programador(por ejemplo sevenseg). Para crear una de estas l\u00edneas de pines , una vez abierto el dispositivo, debemos hacer una petici\u00f3n ioctl de tipo line_request : struct gpio_v2_line_request req; ioctl(fd, GPIO_V2_GET_LINE_IOCTL, &req); El registro req tiene la siguiente estructura: struct gpio_v2_line_request { __u32 offsets[GPIO_V2_LINES_MAX]; //pines a manejar (in) char consumer[GPIO_MAX_NAME_SIZE]; //nombre por usuario (in) struct gpio_v2_line_config config; //configuraci\u00f3n (in) __u32 num_lines; //num pines en offsets (in) __u32 event_buffer_size; //para eventos (in) __u32 padding[5]; //no usado __s32 fd; //fd de salida (out) }; El campo offsets debe contener los n\u00fameros de los pines que pertenecen a la l\u00ednea, indicando el n\u00famero total de pines de la l\u00ednea en num_lines . El campo config se utiliza para indicar la configuraci\u00f3n de cada uno de los pines que pertenecen a la l\u00ednea. El campo fd es de salida, en el retorno de la llamada ioctl contendr\u00e1 un nuevo descriptor de fichero que podemos usar para operar sobre los pines de la l\u00ednea (leer, escribir, etc). El campo config tiene la siguiente estructura: struct gpio_v2_line_config { __aligned_u64 flags; // flags por defecto para los pines __u32 num_attrs; // n\u00famero de atributos en attrs __u32 padding[5]; // no usado struct gpio_v2_line_config_attribute attrs[GPIO_V2_LINE_NUM_ATTRS_MAX]; // array de atributos }; El campo flags permite establecer una configuraci\u00f3n por defecto para los pines de la l\u00ednes. Se trata de una m\u00e1scara de bits a la que se le debe asignar una combinaci\u00f3n, con or a nivel de bit (operadores bitwise ), de las siguientes macros: GPIO_V2_LINE_FLAG_USED GPIO_V2_LINE_FLAG_ACTIVE_LOW GPIO_V2_LINE_FLAG_INPUT GPIO_V2_LINE_FLAG_OUTPUT GPIO_V2_LINE_FLAG_EDGE_RISING GPIO_V2_LINE_FLAG_EDGE_FALLING GPIO_V2_LINE_FLAG_OPEN_DRAIN GPIO_V2_LINE_FLAG_OPEN_SOURCE GPIO_V2_LINE_FLAG_BIAS_PULL_UP GPIO_V2_LINE_FLAG_BIAS_PULL_DOWN GPIO_V2_LINE_FLAG_BIAS_DISABLED Los atributos de la l\u00ednea nos permiten cambiar la configuraci\u00f3n de un subconjunto de los pines de la l\u00ednea o indicar informaci\u00f3n complementaria a los flags necesaria para completar su configuraci\u00f3n (por ejemplo valor del pin en pines de salida). El campo attrs es un array de atributos definidos para la l\u00ednea, indicando el n\u00famero de atributos definidos en el campo num_attrs . Cada atributo se define con la siguiente estructura: struct gpio_v2_line_config_attribute { struct gpio_v2_line_attribute attr; //atributo __aligned_u64 mask; //pines a los que aplica }; El campo mask indica los pines de la linea afectados por el atributo, d\u00f3nde cada bit corresponde a un \u00edndice del array de offsets de la estructura struct gpio_v2_line_request . El campo attr se representa con la siguiente estructura: struct gpio_v2_line_attribute { __u32 id; //GPIO_V2_LINE_ATTR_ID_{FLAGS,OUTPUT_VALUES,DEBOUNCE} __u32 padding; union { __aligned_u64 flags; // flag __aligned_u64 values; // valor ini. 1-activo, 0-inactivo __u32 debounce_period_us;// tiempo de debounce }; }; El campo id indica el tipo de atributo, y su valor determina el campo de la uni\u00f3n que contiene la informaci\u00f3n correspondiente: GPIO_V2_LINE_ATTR_ID_FLAGS : aplicable a cualquier grupo de pines. El campo flags de la uni\u00f3n indica una configuraci\u00f3n alternativa para este grupo de pines. GPIO_V2_LINE_ATTR_ID_OUTPUT : aplicable a grupos de pines configurados como salida (por defecto o con atributos anteriores). El campo values de la uni\u00f3n indica el valor que se asigna a los pines afectados. GPIO_V2_LINE_ATTR_ID_DEBOUNCE : aplicable a pines configurados como entrada (por defecto o con atributos anteriores). El campo debounce_period_us de la uni\u00f3n indica el periodo en microsegundos con el que se muestrea el pin para eliminar rebotes (cualquier cambio m\u00e1s r\u00e1pido es filtrado). Para leer o escribir en los pines de la l\u00ednea debemos realizaremos nuevas operaciones ioctl sobre el descriptor de fichero inicializado en la operaci\u00f3n ioctl line_request . Para escribir un valor en pines configurados como salida usaremos la operaci\u00f3n ioctl GPIO_V2_LINE_SET_VALUES_IOCTL : struct gpio_v2_line_values values; ... ioctl(req.fd, GPIO_V2_LINE_SET_VALUES_IOCTL, &values); mientras que para leer utilizaremos la operaci\u00f3n GPIO_V2_LINE_GET_VALUES_IOCTL : struct gpio_v2_line_values values; ... ioctl(req.fd, GPIO_V2_LINE_GET_VALUES_IOCTL, &values); En ambos casos values tiene la siguiente estructura: struct gpio_v2_line_values { __aligned_u64 bits; //m\u00e1scara de bits con el valor los pines __aligned_u64 mask; //m\u00e1scara de bits que leer/escribir }; Cada bit de ambos campos se refiere a una de las posiciones del campo offsets de la l\u00ednea. Veamos un ejemplo. El programa gpio_blink_v2.c usa el driver de caracteres del GPIO para hacer parpadear los leds que se indican por la l\u00ednea de comandos, con un periodo de 0.5Hz (1 s encendidos, 1 s apagados). Podemos probar este programa en la raspberry, conectando tres pines a los tres leds de la placa BEE. Como ejercicio, se propone al estudiante modificar el c\u00f3digo del programa anterior para que de la sensaci\u00f3n de que una luz va pasando de un led a otro, dando la vuelta cuando llegue a los extremos.","title":"Pines de entrada y salida"},{"location":"gpio_linux/#eventos-en-pines-de-entrada","text":"El driver del GPIO convierte las interrupciones en los pines del GPIO en eventos software que se insertan en el descriptor de fichero (fd) asociado a la linea. Esto permite: Usar programaci\u00f3n multihilo, destiando un hilo a atender los eventos de entrada de la l\u00ednea. Usar mecanismos de multiplexaci\u00f3n de entrada/salida para monitorizar varios descriptores/l\u00edneas (uando select, poll o epoll). La detecci\u00f3n de eventos debe ser habilitada en los pines de entrada, a\u00f1adiendo uno los flags GPIO_V2_LINE_FLAG_EDGE_RISING y/o GPIO_V2_LINE_FLAG_EDGE_FALLING . Adem\u00e1s, se puede utilizar el atributo GPIO_V2_LINE_ATTR_ID_DEBOUNCE para configurar en el pin una eliminaci\u00f3n de rebotes. Por cada evento podremos leer del descriptor de fichero una estructura del tipo: struct gpio_v2_line_event { __aligned_u64 timestamp_ns; //Marca de tiempo del evento __u32 id; //Tipo de evento __u32 offset; //offset del pin correspondiente __u32 seqno; //n\u00fam. de secuencia global __u32 line_seqno; //n\u00fam. de secuencia en este pin __u32 padding[6]; //reservado }; d\u00f3nde el campo id nos identifica el evento detectado mientras que offset identifica el pin en el que se producido el evento. El campo seqno nos indica el \u00f3rden global en el que el evento se ha detectado, mientras que line_seqno nos indica el \u00f3rden entre los eventos de la l\u00ednea. El programa de ejemplo gpio_toggle.c usa el driver GPIO para controlar el estado de unos leds con unos pulsadores. El programa recibe como par\u00e1metros una lista con un n\u00famero par de pines. La primera mitad se configuran como pines entradas, activando la detecci\u00f3n de eventos por flancos de bajada, con un debounce de 10 ms. La segunda mitad se configuran como pines de salida, inicialmente activos (a 1). El programa se queda esperando por eventos de flanco de bajada en las entradas. Cuando se recibe un evento, se conmuta el estado del pin de salida correspondiente. El programa puede probarse conectando los 3 leds de la placa de expansi\u00f3n a 3 gpios (salidas) y los pulsadores a otros 3 gpios (entradas). Como ejercicio se propone al estudiante modificar el programa para que los pulsadores determinen si los leds parpadean o no. Es decir, inicialmente estar\u00e1n los 3 leds parpadeando a una frecuencia fija (por ejemplo 0.5 Hz), si se pulsa uno de los pulsadores el led correspondiente se quedar\u00e1 apagado. Si se vuelve a pulsar, el led volver\u00e1 a parpadear s\u00edncronamente con el resto. El dispositivo de caracteres GPIO soporta algunas operaciones ioctl adicionales: GPIO_V2_GET_LINEINFO_WATCH_IOCTL , monitorizar cambios en un l\u00ednea: Se pasa un argumento struct gpio_v2_line_info Se indican las l\u00edneas que se desean monitorizar Los eventos de cambio se obtinen del fd del gpiochip correspondiente GPIO_V2_LINE_SET_CONFIG_IOCTL , cambiar la configuraci\u00f3n de una l\u00ednea: Se pasa un argumento struct gpio_v2_line_config No es necesario liberar la l\u00ednea antes","title":"Eventos en pines de entrada"},{"location":"gpio_linux/#gpio-mapeado-en-memoria","text":"Linux incorpora el dispositivo /dev/mem que permite acceder a la memoria f\u00edsica del computador. El offset en este fichero es interpretado como una direcci\u00f3n f\u00edsica y el driver controla los rangos accesibles (configurable con la opci\u00f3n de compilaci\u00f3n del kernel CONFIG_STRICT_DEVMEM ) en funci\u00f3n de la arquitectura del computador. S\u00f3lo root tiene acceso a este dispositvo, ya que usarlo implica saltarse pr\u00e1cticamente todos los mecanismos de control y las abstracciones del sistema operativo. Raspbian incorpora tambi\u00e9n el dispositivo /dev/gpiomem, que es un dispositivo que permite el acceso al rango de direcciones f\u00edsicas controlado por el GPIO. Todos los usuarios que pertenezcan al grupo gpio tienen acceso a este fichero, adem\u00e1s de root. Este fichero permite acceder en crudo a los registros del gpio puenteando al driver gpio. Aunque no se recomienda su uso (mejor utilizar el driver gpio), puede ser \u00fatil usarlo para estudiar el funcionamiento del controlador gpio. Como ejemplo vamos a ver c\u00f3mo podemos implementar el ejemplo gpio_blink utilizando este dispositivo. Para ello primero debemos revisar la documentaci\u00f3n de Broadcom para ver c\u00f3mo funciona el controlador GPIO. Resumimos aqu\u00ed los aspectos m\u00e1s destacados. En el controlador GPIO la funci\u00f3n de cada pin se configura en los registros de selecci\u00f3n GPFSELn : Registro Dir. F\u00edsica Pines GPI GPFSEL0 0x3F200000 GPIO0 - GPIO9 GPFSEL1 0x3F200004 GPIO10 - GPIO19 GPFSEL2 0x3F200008 GPIO20 - GPIO29 GPFSEL3 0x3F20000C GPIO30 - GPIO39 GPFSEL4 0x3F200010 GPIO40 - GPIO49 GPFSEL5 0x3F200014 GPIO50 - GPIO53 Se utilizan tres bits por pin, con la codificaci\u00f3n indicada en la siguiente tabla: Funci\u00f3n (seg\u00fan doc. Broadcom ) 000 Entrada 001 Salida 100 Funci\u00f3n alternativa 0 101 Funci\u00f3n alternativa 1 110 Funci\u00f3n alternativa 2 111 Funci\u00f3n alternativa 3 011 Funci\u00f3n alternativa 4 010 Funci\u00f3n alternativa 5 Para operar sobre los pines de salida hay dos pares de registros: Valor Pin Registro Direcci\u00f3n (ARM) 1 0-31 GPFSET0 0x3F20001C 1 32-53 GPFSET1 0x3F200020 0 0-31 GPFCLR0 0x3F200028 0 32-53 GPFCLR1 0x3F20002C As\u00ed, para poner a 1 un pin de salida debemos escribir un 1 en la posici\u00f3n correspondiente del registro GPSET que corresponda. Y para poner dicho pin a 0 deberemos escribir un 1 en el la misma posici\u00f3n del registro GPCLR correspondiente. Escribir un 0 no modifica el valor del pin. El programa gpio_blink_mem proyectan el dispositivo /dev/gpiomem en el mapa virtual de memoria del proceso utilizando mmap, con el fin de acceder dir\u00e9ctamente a los registros del controlador. Se utilizan unos arrays para almacenar los offsets de los registros: uint32_t gpfsel_offset[] = {0x00,0x04,0x08,0x0C,0x10,0x14}; uint32_t gpfset_offset[] = {0x1C, 0x20}; uint32_t gpfclr_offset[] = {0x28, 0x2C}; Estos offsets se suman a la direcci\u00f3n base que es un puntero a byte, convirtiendo el resultado a un puntero a uint32_t por conveniencia: uint8_t *gpiomem; volatile uint32_t * fpsel; ... gpiomem = mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_SHARED, fd, 0x3f200000); ... n = get_int(argv[i+1], 10, desc); fpsel = (uint32_t *)(gpiomem + gpfsel_offset[n / 10]); Las escrituras en los registros se hacen desreferenciado los punteros, que se han declarado como vol\u00e1tiles: *fpsel |= (0x1 << (n % 10)*3); Aunque este mecanismo permite controlar los gpios, debemos notar que el c\u00f3digo es muy dependiente del hardware, utilizando offsets y selecciones de registros en funci\u00f3n del n\u00famero de pin o la operaci\u00f3n a realizar; y escogiendo adecuadamente los c\u00f3digos a escribir en los registros siguiendo la documentaci\u00f3n del fabricante del SoC. Notemos adem\u00e1s que el estado de los leds se mantiene cuando el programa termina, y puede entrar en conflicto con cualquier otro proceso que use el driver del sistema para el gpio. Este c\u00f3digo es mucho m\u00e1s propenso a errores que no ser\u00e1n identificados por el sistema (no hay valor de retorno de error). La librer\u00eda bcm2835 usa entrada salida mapeada en memoria y ofrece un API m\u00e1s sencillo y pr\u00e1ctico para el manejo de los controladores de la raspberry pi, pero sigue salt\u00e1ndose todos los controles del sistema operativo, por lo que resulta m\u00e1s adecuando aprender a utilizar el driver GPIO estudiado en la secci\u00f3n anterior.","title":"GPIO mapeado en memoria"},{"location":"i2c_linux/","text":"Control de dispositivos I2C Para probar los c\u00f3digos utilizados en los ejemplos de esta pr\u00e1ctica necesitamos disponer de una placa Inertial One ATAVRSBIN1 . A lo largo de la pr\u00e1ctica repasaremos los conceptos b\u00e1sicos del bus I2C y veremos c\u00f3mo podemos comunicarnos con los dispositivos I2C utilizando las utilidades incluidas en Linux, as\u00ed como el driver I2C gen\u00e9rico incluido. Bus I2C El Inter-Integrated Circuit (IIC/\\IIC{}/I2C) es un bus serie dise\u00f1ado por Philips en d\u00e9cada del 1980 para la interconexi\u00f3n de perif\u00e9ricos a un microcontrolador. Proporciona una conexi\u00f3n serie s\u00edncrona unidireccional (halfduplex). Los dispositivos pueden ser m\u00e1ster o slave, permiti\u00e9ndose la presencia de varios m\u00e1sters en el bus. El protocolo de trasmisi\u00f3n incorpora un mecanismo de arbitraje que permite seleccionar el m\u00e1ster que toma el control del bus en caso de que varios quieran enviar simult\u00e1neamente. El m\u00e1ster es quien inicia y finaliza cada transferencia. Direcciona al esclavo con el que se quiere comunicar y genera la se\u00f1al de reloj. El esclavo no puede enviar o recibir por su cuenta. El bus puede trabajar a varias velocidades: 100Kb/s, 400Kb/s, 1Mb/s, 3.4Mb/s y 5Mb/s y s\u00f3lo utiliza dos l\u00edneas, adem\u00e1s de la tierra com\u00fan: Serial Data (SDA), que lleva los datos, y Serial Clock (SCL), que lleva la se\u00f1al de reloj generada por el master. En los \u00faltimos a\u00f1os se han popularizado algunas variantes de I2C utlizadas en los computadores personales para el control de algunos sensores, como son SMBus y PMBus. Estos protocolos pueden utilizarse igual con el driver I2C de Linux. Las conexiones a las l\u00ednea van en colector/drenador abierto ( open drain/collector ). Se emplean resistencias de pull-up externas, de 4.7 K t\u00edpicamente, que dejan la linea a Vdd en reposo. Los dispositivos pueden poner (forzar) las l\u00edneas a 0 ( OR cableada). La siguiente figura ilustra las sincronizaciones de comienzo y fin de una transacci\u00f3n I2C. Primero el m\u00e1ster env\u00eda comando START , una transici\u00f3n Alto a Bajo de SDA, con SCL en alto. A partir de ese momento el bus se considera ocupado y se procede al env\u00edo de datos (trama), gener\u00e1ndose un pulso en SCL por cada bit transferido. El receptor puede mantener SCL baja en cualquier momento si quiere alargar el ciclo de reloj (forzar una espera del master). La se\u00f1al SDA se debe mantener estable mientras SCL est\u00e1 alta. Cuando se han enviado todos los bits de la transacci\u00f3n el m\u00e1ster env\u00eda comando STOP , una transacci\u00f3n Bajo a Alto de SDA con SCL en alto. El bus queda libre tras este comando de STOP . La siguiente figura detalla la estructura de la trama. Como podemos ver, tras el comando Start hay un byte de direcci\u00f3n, que se compone de: 7 bits de direcci\u00f3n del esclavo, empezando por el m\u00e1s significativo 1 bit de tipo de operaci\u00f3n: R/nW 1 bit de ACK A continuaci\u00f3n se env\u00edan uno o m\u00e1s bytes de datos, cada uno de ellos seguidos de un bit de ACK que debe poner a 0 el receptor. Los bytes de datos se env\u00edan tambi\u00e9n empezando por el bit m\u00e1s significativo. La transacci\u00f3n termina normalmente con el env\u00edo de un comando de STOP . Pero se quiere evitar perder el bus, el m\u00e1ster puede decidir env\u00eda un comando de START en lugar del STOP (que se llama START repetido), comenzando dir\u00e9ctamente una nueva transmisi\u00f3n. As\u00ed, una transmisi\u00f3n de escritura, en la que un m\u00e1ster env\u00eda un dato a un esclavo tendr\u00eda la siguiente estructura: El m\u00e1ster env\u00eda un primer byte de direcci\u00f3n del esclavo, indicado el que quiere escribir. Luego suele enviar un byte de comando, que direcciona el registro en el que quiere escribir, seguido del dato a escribir. La operaci\u00f3n de lectura normalmente va precedida de una operaci\u00f3n de escritura en la que se env\u00eda el comando de lectura, indicando el registro del que se quiere leer. Despu\u00e9s se realiza la operaci\u00f3n de lectura propiamente dicha, en la que el primer byte direcciona el dispositivo y se indique que se quiere hacer una lectura, y el m\u00e1ster luego genera los suficientes pulsos de reloj para leer los bytes que enviar\u00e1 el esclavo, activando como corresponda el bit de ACK en cada byte transferido. I2C contempla la posibilidad de utilizar direcciones de 10 bits. Para ello, se reservan las direcciones 11110xy para indicar que la direcci\u00f3n es de 10 bits: Los bits xy ser\u00e1n los dos bits m\u00e1s significativos de la direcci\u00f3n Los 8 bits restantes se env\u00edan en el siguiente byte No lo soportan todos los controladores I2C, ni es soportado por dispositivos SMBus. En transacciones escritura-lectura encadenadas s\u00f3lo se repite el primer byte de la direcci\u00f3n. En este caso, el esquema de una operaci\u00f3n de escritura es como indica la siguiente figura: I2C write 10 bit address La lectura con un dispositivo con direcci\u00f3n de 10 bits se ilustra en la siguiente figura: I2C read 10 bit address Existen otras extensiones al bus I2C, que pueden consultarse en la especificaci\u00f3n de I2C . I2C en Linux El driver I2C de Linux expone dispositivos de caracteres /dev/i2c-# . Para ello es necesario cargar el m\u00f3dulo i2c-dev. Por cada controlador I2C del SoC aparecer\u00e1 un fichero en /sys/class/i2c-dev/ . El paquete i2c-tools (puede instalarse con apt-get install i2c-tools ) nos da algunas herramientas interesantes: i2cdetect -l : nos da una lista de controladores i2c en el sistema i2cdetect -y # : escanea el bus i2c-# y nos dice los dispositivos detectados y sus direcciones i2cget : permite leer registros de dispositivos conectados al bus. Por ejemplo: i2cget -y 1 0x68 0x1c b i2cset : permite escribir en registros de dispositivos conectados al bus. i2ctransfer : nos permite hacer transferencias encadenadas con slaves conectados al bus. Por ejemplo: i2ctransfer -y 1 w1@0x68 0x1c r1 Hay tres tipos de transaccionees soportadas por el driver: Transacciones I2C est\u00e1ndar: Operaciones read/write independientes Bit de stop detr\u00e1s de cada una Para leer un registro primero hacemos una op de escritura con el n\u00famero del registro y luego una operaci\u00f3n de lectura para leer el valor Transacciones I2C encadenadas con ioctl Varias transacciones con una sola operaci\u00f3n ioctl tipo I2C_RDWR Por defecto con repeated start Puede usarse para leer un registro, concatenando el write del comando con el read siguiente Transacciones SMBus API espec\u00edfico y simplificado implementado en la libi2c Se prefiere su uso para dispositivos compatibles El interfaz est\u00e1 documentado en www.kernel.org y en los ficheros de cabecera del driver: i2c-dev.h , i2c.h y smbus.h . Las operaciones ioctl soportadas por estos dispositivos son: I2C_SLAVE : establece la direcci\u00f3n del esclavo, nos ahorramos tener que ponerla en cada operaci\u00f3n I2C_FUNCS : nos permite consultar la funcionalidad disponible en el controlador I2C_TENBIT : selecci\u00f3n del uso de direcciones de 10 bits. El controlador debe tener la funcionalidad I2C_FUNC_10BIT_ADDR I2C_RDWR : Para realizar transacciones de lectura/escritura encadenadas, sin bit de stop entre ellas. El controlador debe tener I2C_FUNC_I2C . I2C_PEC : generaci\u00f3n y verificaci\u00f3n de Packet Error Checking para el protocolo SMBus. El controlador debe tener I2C_FUNC_SMBUS_PEC I2C_SMBUS : Para transacciones SMBus.Se recomienda el uso de las funciones i2c_smbus_* , proporcionadas por la librer\u00eda libi2c (paquete i2c-tools ), que hacen de wrapper sobre la operaci\u00f3n ioctl SMBus es un subconjunto de I2C: S\u00f3lo admite direcciones de 7 bits S\u00f3lo hasta 100 KHz Timeout 35 ms, frecuencia m\u00ednima de 10 KHz El API implementado en libi2c opera sobre la operaci\u00f3n ioctl I2C_SMBUS : __s32 i2c_smbus_write_quick(int file, __u8 value); __s32 i2c_smbus_read_byte(int file); __s32 i2c_smbus_write_byte(int file, __u8 value); __s32 i2c_smbus_read_byte_data(int file, __u8 command); __s32 i2c_smbus_write_byte_data(int file, __u8 command, __u8 value); __s32 i2c_smbus_read_word_data(int file, __u8 command); __s32 i2c_smbus_write_word_data(int file, __u8 command, __u16 value); /* Returns the number of read bytes */ __s32 i2c_smbus_read_block_data(int file, __u8 command, __u8 *values); __s32 i2c_smbus_write_block_data(int file, __u8 command, __u8 length, const __u8 *values); El API completo se documenta en /usr/include/i2c/smbus.h . Ejemplo de transacciones I2C est\u00e1ndar El siguiente c\u00f3digo es un ejemplo de lectura de un registro de tama\u00f1o byte de un sensor i2c, usando una transacci\u00f3n I2C est\u00e1ndar con el driver I2C de Linux: int addr = 0x68; // Direcci\u00f3n del sensor I2C unsigned char regid = 0x1b; // Id del registro a leer unsigned char buf; // buffer para el valor le\u00eddo int fd; fd = open(\"/dev/i2c-1\", O_RDWR); ioctl(fd, I2C_SLAVE, addr); write(fd, &regid, 1); // Transacci\u00f3n de escritura/comando read(fd, &buf, 1); // Transacci\u00f3n de lectura Ejemplo de transacci\u00f3n I2C encadenada El siguiente c\u00f3digo es un ejemplo de una transacci\u00f3n encadenada con el driver de I2C de Linux en el que se hace la misma lectura que en el ejemplo anterior, pero encadenando la operaci\u00f3n de escritura (que indica el registro a leer) y la operaci\u00f3n de lectura posterior: int fd; // descriptor de fichero int addr = 0x68; // Direcci\u00f3n del sensor I2C char wbuf[1] = {0x1b}; // Id del registro a leer char rbuf[1]; // buffer para el valor le\u00eddo struct i2c_msg msgs[2]; // variables para la op ioctl struct i2c_rdwr_ioctl_data i2cdata; // Transacci\u00f3n de escritura / comando msgs[0].addr = addr; msgs[0].flags = 0; msgs[0].len = 1; msgs[0].buf = wbuf; // Transacci\u00f3n de lectura msgs[1].addr = addr; msgs[1].flags = I2C_M_RD; msgs[1].len = 1; msgs[1].buf = rbuf; fd = open(\"/dev/i2c-1\", O_RDWR); // ioctl para realizar las dos transacciones i2cdata.msgs = msgs; i2cdata.nmsgs = 2; ioctl(fd, I2C_RDWR, &i2cdata); // Operaciones encadenadas Ejemplo de transacci\u00f3n SMBus La misma lectura de un registro de tama\u00f1o byte usando el API SMBus se realizar\u00eda del siguiente modo: int addr = 0x68; // Direcci\u00f3n del sensor I2C unsigned char regid = 0x1b; // Id del registro a leer unsigned char buf; // buffer para el valor le\u00eddo int fd, ret; fd = open(\"/dev/i2c-1\", O_RDWR); ioctl(fd, I2C_SLAVE, addr); ret = i2c_smbus_read_byte_data(fd, regid); buf = ret; Ejemplo: lectura del sensor Inertial One La placa Inertial One ATAVRSBIN1 contiene 3 dispositivos i2c: Aceler\u00f3metro de tres ejes Bosh Sensortech (BMA-150) Gir\u00f3scopo de tres ejes InvenSense (ITG-3200) Br\u00fajula Electr\u00f3nica de tres ejes AKM (AK8975) Podemos conectarla a la placa BEE del siguiente modo: Pin 1 del Jumper J2 a SDA Pin 2 del Jumper J2 a SCL Pin 9 del Jumper J2 a Gnd Pin 10 del Jumper J2 a Vdd Para comprobar que est\u00e1 bien conectada podemos usar el comando i2cdetect -y 1 : pi@raspberrypi:~/ejemplos $ i2cdetect -y 1 0 1 2 3 4 5 6 7 8 9 a b c d e f 00: -- -- -- -- 0c -- -- -- 10: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 20: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 30: -- -- -- -- -- -- -- -- 38 -- -- -- -- -- -- -- 40: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 50: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 60: -- -- -- -- -- -- -- -- 68 -- -- -- -- -- -- -- 70: -- -- -- -- -- -- -- -- pi@raspberrypi:~/ejemplos $ El Gir\u00f3scopo ITG-3200 del Inertial One tiene asignada la direcci\u00f3n 0x68, e integra cuatro sensores de 16 bits accesibles en los siguientes registros: Como puede verse, cada sensor tiene dos registros, uno con los 8 bits m\u00e1s significativos y otro con los 8 bits menos significativos. El programa de ejemplo itg3200_sensors.c lee estos sensores y muestra su valor por la salida est\u00e1ndar. Los flags de la l\u00ednea de comandos permiten seleccionar los tres tipos de transacciones para leer estos valores. Examina el programa y prueba a utilizarlo leyendo cada uno de los registros. Comprueba que funcionan los tres tipos de transacciones. Ejercicio Dise\u00f1ar un programa que lea los valores acc_x , acc_y y acc_z del aceler\u00f3metro BMA 150 incluido en la unidad inercial. Consultar el datasheet del componente para: Determinar los registros que hay que leer Determinar el registro de configuraci\u00f3n del: rango de medida, seleccionar el rango [-2g, 2g) el ancho de banda, seleccionar 25 Hz Determinar la sensibilidad de la medida Consultar el[Application Note de NXP Tilt Sensing Using a Three-Axis Accelerometer (AN3461) para determinar c\u00f3mo obtener los \u00e1ngulos roll y pitch a partir de las medidas del aceler\u00f3metro.","title":"Control de dispositivos I2C"},{"location":"i2c_linux/#control-de-dispositivos-i2c","text":"Para probar los c\u00f3digos utilizados en los ejemplos de esta pr\u00e1ctica necesitamos disponer de una placa Inertial One ATAVRSBIN1 . A lo largo de la pr\u00e1ctica repasaremos los conceptos b\u00e1sicos del bus I2C y veremos c\u00f3mo podemos comunicarnos con los dispositivos I2C utilizando las utilidades incluidas en Linux, as\u00ed como el driver I2C gen\u00e9rico incluido.","title":"Control de dispositivos I2C"},{"location":"i2c_linux/#bus-i2c","text":"El Inter-Integrated Circuit (IIC/\\IIC{}/I2C) es un bus serie dise\u00f1ado por Philips en d\u00e9cada del 1980 para la interconexi\u00f3n de perif\u00e9ricos a un microcontrolador. Proporciona una conexi\u00f3n serie s\u00edncrona unidireccional (halfduplex). Los dispositivos pueden ser m\u00e1ster o slave, permiti\u00e9ndose la presencia de varios m\u00e1sters en el bus. El protocolo de trasmisi\u00f3n incorpora un mecanismo de arbitraje que permite seleccionar el m\u00e1ster que toma el control del bus en caso de que varios quieran enviar simult\u00e1neamente. El m\u00e1ster es quien inicia y finaliza cada transferencia. Direcciona al esclavo con el que se quiere comunicar y genera la se\u00f1al de reloj. El esclavo no puede enviar o recibir por su cuenta. El bus puede trabajar a varias velocidades: 100Kb/s, 400Kb/s, 1Mb/s, 3.4Mb/s y 5Mb/s y s\u00f3lo utiliza dos l\u00edneas, adem\u00e1s de la tierra com\u00fan: Serial Data (SDA), que lleva los datos, y Serial Clock (SCL), que lleva la se\u00f1al de reloj generada por el master. En los \u00faltimos a\u00f1os se han popularizado algunas variantes de I2C utlizadas en los computadores personales para el control de algunos sensores, como son SMBus y PMBus. Estos protocolos pueden utilizarse igual con el driver I2C de Linux. Las conexiones a las l\u00ednea van en colector/drenador abierto ( open drain/collector ). Se emplean resistencias de pull-up externas, de 4.7 K t\u00edpicamente, que dejan la linea a Vdd en reposo. Los dispositivos pueden poner (forzar) las l\u00edneas a 0 ( OR cableada). La siguiente figura ilustra las sincronizaciones de comienzo y fin de una transacci\u00f3n I2C. Primero el m\u00e1ster env\u00eda comando START , una transici\u00f3n Alto a Bajo de SDA, con SCL en alto. A partir de ese momento el bus se considera ocupado y se procede al env\u00edo de datos (trama), gener\u00e1ndose un pulso en SCL por cada bit transferido. El receptor puede mantener SCL baja en cualquier momento si quiere alargar el ciclo de reloj (forzar una espera del master). La se\u00f1al SDA se debe mantener estable mientras SCL est\u00e1 alta. Cuando se han enviado todos los bits de la transacci\u00f3n el m\u00e1ster env\u00eda comando STOP , una transacci\u00f3n Bajo a Alto de SDA con SCL en alto. El bus queda libre tras este comando de STOP . La siguiente figura detalla la estructura de la trama. Como podemos ver, tras el comando Start hay un byte de direcci\u00f3n, que se compone de: 7 bits de direcci\u00f3n del esclavo, empezando por el m\u00e1s significativo 1 bit de tipo de operaci\u00f3n: R/nW 1 bit de ACK A continuaci\u00f3n se env\u00edan uno o m\u00e1s bytes de datos, cada uno de ellos seguidos de un bit de ACK que debe poner a 0 el receptor. Los bytes de datos se env\u00edan tambi\u00e9n empezando por el bit m\u00e1s significativo. La transacci\u00f3n termina normalmente con el env\u00edo de un comando de STOP . Pero se quiere evitar perder el bus, el m\u00e1ster puede decidir env\u00eda un comando de START en lugar del STOP (que se llama START repetido), comenzando dir\u00e9ctamente una nueva transmisi\u00f3n. As\u00ed, una transmisi\u00f3n de escritura, en la que un m\u00e1ster env\u00eda un dato a un esclavo tendr\u00eda la siguiente estructura: El m\u00e1ster env\u00eda un primer byte de direcci\u00f3n del esclavo, indicado el que quiere escribir. Luego suele enviar un byte de comando, que direcciona el registro en el que quiere escribir, seguido del dato a escribir. La operaci\u00f3n de lectura normalmente va precedida de una operaci\u00f3n de escritura en la que se env\u00eda el comando de lectura, indicando el registro del que se quiere leer. Despu\u00e9s se realiza la operaci\u00f3n de lectura propiamente dicha, en la que el primer byte direcciona el dispositivo y se indique que se quiere hacer una lectura, y el m\u00e1ster luego genera los suficientes pulsos de reloj para leer los bytes que enviar\u00e1 el esclavo, activando como corresponda el bit de ACK en cada byte transferido. I2C contempla la posibilidad de utilizar direcciones de 10 bits. Para ello, se reservan las direcciones 11110xy para indicar que la direcci\u00f3n es de 10 bits: Los bits xy ser\u00e1n los dos bits m\u00e1s significativos de la direcci\u00f3n Los 8 bits restantes se env\u00edan en el siguiente byte No lo soportan todos los controladores I2C, ni es soportado por dispositivos SMBus. En transacciones escritura-lectura encadenadas s\u00f3lo se repite el primer byte de la direcci\u00f3n. En este caso, el esquema de una operaci\u00f3n de escritura es como indica la siguiente figura: I2C write 10 bit address La lectura con un dispositivo con direcci\u00f3n de 10 bits se ilustra en la siguiente figura: I2C read 10 bit address Existen otras extensiones al bus I2C, que pueden consultarse en la especificaci\u00f3n de I2C .","title":"Bus I2C"},{"location":"i2c_linux/#i2c-en-linux","text":"El driver I2C de Linux expone dispositivos de caracteres /dev/i2c-# . Para ello es necesario cargar el m\u00f3dulo i2c-dev. Por cada controlador I2C del SoC aparecer\u00e1 un fichero en /sys/class/i2c-dev/ . El paquete i2c-tools (puede instalarse con apt-get install i2c-tools ) nos da algunas herramientas interesantes: i2cdetect -l : nos da una lista de controladores i2c en el sistema i2cdetect -y # : escanea el bus i2c-# y nos dice los dispositivos detectados y sus direcciones i2cget : permite leer registros de dispositivos conectados al bus. Por ejemplo: i2cget -y 1 0x68 0x1c b i2cset : permite escribir en registros de dispositivos conectados al bus. i2ctransfer : nos permite hacer transferencias encadenadas con slaves conectados al bus. Por ejemplo: i2ctransfer -y 1 w1@0x68 0x1c r1 Hay tres tipos de transaccionees soportadas por el driver: Transacciones I2C est\u00e1ndar: Operaciones read/write independientes Bit de stop detr\u00e1s de cada una Para leer un registro primero hacemos una op de escritura con el n\u00famero del registro y luego una operaci\u00f3n de lectura para leer el valor Transacciones I2C encadenadas con ioctl Varias transacciones con una sola operaci\u00f3n ioctl tipo I2C_RDWR Por defecto con repeated start Puede usarse para leer un registro, concatenando el write del comando con el read siguiente Transacciones SMBus API espec\u00edfico y simplificado implementado en la libi2c Se prefiere su uso para dispositivos compatibles El interfaz est\u00e1 documentado en www.kernel.org y en los ficheros de cabecera del driver: i2c-dev.h , i2c.h y smbus.h . Las operaciones ioctl soportadas por estos dispositivos son: I2C_SLAVE : establece la direcci\u00f3n del esclavo, nos ahorramos tener que ponerla en cada operaci\u00f3n I2C_FUNCS : nos permite consultar la funcionalidad disponible en el controlador I2C_TENBIT : selecci\u00f3n del uso de direcciones de 10 bits. El controlador debe tener la funcionalidad I2C_FUNC_10BIT_ADDR I2C_RDWR : Para realizar transacciones de lectura/escritura encadenadas, sin bit de stop entre ellas. El controlador debe tener I2C_FUNC_I2C . I2C_PEC : generaci\u00f3n y verificaci\u00f3n de Packet Error Checking para el protocolo SMBus. El controlador debe tener I2C_FUNC_SMBUS_PEC I2C_SMBUS : Para transacciones SMBus.Se recomienda el uso de las funciones i2c_smbus_* , proporcionadas por la librer\u00eda libi2c (paquete i2c-tools ), que hacen de wrapper sobre la operaci\u00f3n ioctl SMBus es un subconjunto de I2C: S\u00f3lo admite direcciones de 7 bits S\u00f3lo hasta 100 KHz Timeout 35 ms, frecuencia m\u00ednima de 10 KHz El API implementado en libi2c opera sobre la operaci\u00f3n ioctl I2C_SMBUS : __s32 i2c_smbus_write_quick(int file, __u8 value); __s32 i2c_smbus_read_byte(int file); __s32 i2c_smbus_write_byte(int file, __u8 value); __s32 i2c_smbus_read_byte_data(int file, __u8 command); __s32 i2c_smbus_write_byte_data(int file, __u8 command, __u8 value); __s32 i2c_smbus_read_word_data(int file, __u8 command); __s32 i2c_smbus_write_word_data(int file, __u8 command, __u16 value); /* Returns the number of read bytes */ __s32 i2c_smbus_read_block_data(int file, __u8 command, __u8 *values); __s32 i2c_smbus_write_block_data(int file, __u8 command, __u8 length, const __u8 *values); El API completo se documenta en /usr/include/i2c/smbus.h .","title":"I2C en Linux"},{"location":"i2c_linux/#ejemplo-de-transacciones-i2c-estandar","text":"El siguiente c\u00f3digo es un ejemplo de lectura de un registro de tama\u00f1o byte de un sensor i2c, usando una transacci\u00f3n I2C est\u00e1ndar con el driver I2C de Linux: int addr = 0x68; // Direcci\u00f3n del sensor I2C unsigned char regid = 0x1b; // Id del registro a leer unsigned char buf; // buffer para el valor le\u00eddo int fd; fd = open(\"/dev/i2c-1\", O_RDWR); ioctl(fd, I2C_SLAVE, addr); write(fd, &regid, 1); // Transacci\u00f3n de escritura/comando read(fd, &buf, 1); // Transacci\u00f3n de lectura","title":"Ejemplo de transacciones I2C est\u00e1ndar"},{"location":"i2c_linux/#ejemplo-de-transaccion-i2c-encadenada","text":"El siguiente c\u00f3digo es un ejemplo de una transacci\u00f3n encadenada con el driver de I2C de Linux en el que se hace la misma lectura que en el ejemplo anterior, pero encadenando la operaci\u00f3n de escritura (que indica el registro a leer) y la operaci\u00f3n de lectura posterior: int fd; // descriptor de fichero int addr = 0x68; // Direcci\u00f3n del sensor I2C char wbuf[1] = {0x1b}; // Id del registro a leer char rbuf[1]; // buffer para el valor le\u00eddo struct i2c_msg msgs[2]; // variables para la op ioctl struct i2c_rdwr_ioctl_data i2cdata; // Transacci\u00f3n de escritura / comando msgs[0].addr = addr; msgs[0].flags = 0; msgs[0].len = 1; msgs[0].buf = wbuf; // Transacci\u00f3n de lectura msgs[1].addr = addr; msgs[1].flags = I2C_M_RD; msgs[1].len = 1; msgs[1].buf = rbuf; fd = open(\"/dev/i2c-1\", O_RDWR); // ioctl para realizar las dos transacciones i2cdata.msgs = msgs; i2cdata.nmsgs = 2; ioctl(fd, I2C_RDWR, &i2cdata); // Operaciones encadenadas","title":"Ejemplo de transacci\u00f3n I2C encadenada"},{"location":"i2c_linux/#ejemplo-de-transaccion-smbus","text":"La misma lectura de un registro de tama\u00f1o byte usando el API SMBus se realizar\u00eda del siguiente modo: int addr = 0x68; // Direcci\u00f3n del sensor I2C unsigned char regid = 0x1b; // Id del registro a leer unsigned char buf; // buffer para el valor le\u00eddo int fd, ret; fd = open(\"/dev/i2c-1\", O_RDWR); ioctl(fd, I2C_SLAVE, addr); ret = i2c_smbus_read_byte_data(fd, regid); buf = ret;","title":"Ejemplo de transacci\u00f3n SMBus"},{"location":"i2c_linux/#ejemplo-lectura-del-sensor-inertial-one","text":"La placa Inertial One ATAVRSBIN1 contiene 3 dispositivos i2c: Aceler\u00f3metro de tres ejes Bosh Sensortech (BMA-150) Gir\u00f3scopo de tres ejes InvenSense (ITG-3200) Br\u00fajula Electr\u00f3nica de tres ejes AKM (AK8975) Podemos conectarla a la placa BEE del siguiente modo: Pin 1 del Jumper J2 a SDA Pin 2 del Jumper J2 a SCL Pin 9 del Jumper J2 a Gnd Pin 10 del Jumper J2 a Vdd Para comprobar que est\u00e1 bien conectada podemos usar el comando i2cdetect -y 1 : pi@raspberrypi:~/ejemplos $ i2cdetect -y 1 0 1 2 3 4 5 6 7 8 9 a b c d e f 00: -- -- -- -- 0c -- -- -- 10: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 20: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 30: -- -- -- -- -- -- -- -- 38 -- -- -- -- -- -- -- 40: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 50: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 60: -- -- -- -- -- -- -- -- 68 -- -- -- -- -- -- -- 70: -- -- -- -- -- -- -- -- pi@raspberrypi:~/ejemplos $ El Gir\u00f3scopo ITG-3200 del Inertial One tiene asignada la direcci\u00f3n 0x68, e integra cuatro sensores de 16 bits accesibles en los siguientes registros: Como puede verse, cada sensor tiene dos registros, uno con los 8 bits m\u00e1s significativos y otro con los 8 bits menos significativos. El programa de ejemplo itg3200_sensors.c lee estos sensores y muestra su valor por la salida est\u00e1ndar. Los flags de la l\u00ednea de comandos permiten seleccionar los tres tipos de transacciones para leer estos valores. Examina el programa y prueba a utilizarlo leyendo cada uno de los registros. Comprueba que funcionan los tres tipos de transacciones.","title":"Ejemplo: lectura del sensor Inertial One"},{"location":"i2c_linux/#ejercicio","text":"Dise\u00f1ar un programa que lea los valores acc_x , acc_y y acc_z del aceler\u00f3metro BMA 150 incluido en la unidad inercial. Consultar el datasheet del componente para: Determinar los registros que hay que leer Determinar el registro de configuraci\u00f3n del: rango de medida, seleccionar el rango [-2g, 2g) el ancho de banda, seleccionar 25 Hz Determinar la sensibilidad de la medida Consultar el[Application Note de NXP Tilt Sensing Using a Three-Axis Accelerometer (AN3461) para determinar c\u00f3mo obtener los \u00e1ngulos roll y pitch a partir de las medidas del aceler\u00f3metro.","title":"Ejercicio"},{"location":"pwm_linux/","text":"Control PWM en Linux En esta pr\u00e1ctica vamos a estudiar c\u00f3mo podemos utilizar los controladores PWM desde un programa de usuario en Linux. Se\u00f1ales PWM Las se\u00f1ales de modulaci\u00f3n de ancho de pulso (Pulse Width Modulation, PWM) se describen en la siguiente figura: Se trata de una se\u00f1al rectangular de un periodo fijo, en la que la fracci\u00f3n del periodo en que la se\u00f1al toma un valor distinto de cero se define como duty cycle . Sin embargo, muchos interfaces de control PWM toman el duty cycle como el tiempo absoluto en que la se\u00f1al est\u00e1 activa, que debe ser menor que la duraci\u00f3n (absoluta) del periodo. Este tipo de se\u00f1ales se utilizan frecuentemente para el control de servos y la conversi\u00f3n digital anal\u00f3gica (en ausencia de DAC). Interfaz sysfs En la raspberry pi hay dos controladores pwm hardware, con la misma se\u00f1al de reloj (19.2 MHz). Aunque puede obtenerse su salida por varios pines distintos, para la placa de expansi\u00f3n BEE es conveniente usar para el pwm0 el pin 18 o el pin 12 y para el pwm1 el pin 13. Los dos controladores son usados por el sistema de audio. El driver de pwm ofrece actualmente un interfaz a trav\u00e9s del sistema virtual de ficheros sysfs. Debe ser habilitado cargando el overlay pwm-2chan. Esto puede hacerse de dos formas: Din\u00e1micamente con: bash sudo dtoverlay pwm-2chan pin=18 func=2 pin2=13 func2=4 En arranque, si a\u00f1adimos al fichero \\texttt{config.txt} la l\u00ednea: bash dtoverlay=pwm-2chan,pin=18,func=2,pin2=13,func2=4 Una vez habilitado nos aparecer\u00e1 el directorio /sys/class/pwm/pwmchip0 con los siguientes ficheros: device, export, npwm, power, subsystem, uevent y unexport. Para poder usar los canales pwm primero hay que exportarlos escribiendo el n\u00famero del canal a usar en el fichero export: $ echo 0 > /sys/class/pwm/pwmchip0/export $ echo 1 > /sys/class/pwm/pwmchip0/export Una vez exportados nos aparecer\u00e1n dos nuevos directorios: pwm0 y pwm1 , con los siguientes ficheros: capture , duty_cycle , enable , period , polarity , power y uevent . El sistema genera un evento udev cuando aparecen y hay que esperar este evento para poder continuar (ver ejemplo). Una vez que se dispare el evento podemos usar un canal. Para ello debemos seguir el siguiente procedimiento: Escribir el periodo en ns en el fichero period Escribir el duty cycle en ns en el fichero duty_cycle Escribir un 1 en el fichero enable Podemos cambiar din\u00e1micamente el periodo y/o el duty cycle o apagar un canal escribiendo un 0 en el fichero enable . Cuando queramos dejar de usar un canal deberemos escribir su n\u00famero en el fichero unexport . Como ejemplo, el script bash servo_cont_rot.sh ofrece un interfaz de l\u00ednea de comandos para el control de un servo de rotaci\u00f3n continual de parallax. Si se dispone de uno de estos servos, se puede probar conect\u00e1ndolo a los pines indicados arriba. Podemos ejecutar el script sin par\u00e1metros o con -h para ver la lista de opciones. El programa servo_control.c es un ejemplo de como controlar el mismo servo de rotaci\u00f3n continua de parallax desde un programa C. Utiliza 3 pulsadores conectados a tres pines del gpio para controlar el servo. El programa recibe como argumentos: el fichero del controlador gpio, el canal de pwm a usar y los tres pines a usar como entrada. Uno de los botones permite decrementar el duty cycle, otro incrementarlo y otro parar el servo. El programa exporta el canal pwm indicado y espera a que el kernel notifique que est\u00e1 montado (esperando eventos de udev). Si el pwm ya est\u00e1 exportado da un aviso pero sigue adelante. PWM por software En lugar de utilizar controladores PWM hardware, es posible utilizar pines gen\u00e9ricos del GPIO para generar una se\u00f1al PWM por software. Si es posible, ser\u00eda mejor crear para ello una tarea de tiempo real, aunque esto queda fuera del alcance de esta pr\u00e1ctica. Tenemos dos alternativas: Usar clock_nanosleep con el flag TIMER_ABSTIME , usando dos intervalos, uno para el periodo y otro para el duty cycle. De esta forma, se espera ( clock_nanosleep ) un periodo, Usar timers POSIX, con un timer peri\u00f3dico para el periodo y uno one shot para el duty cycle, activado en cada periodo. Probar estas alternativas se deja como ejercicio al estudiante interesado. La limitaci\u00f3n de esta estrategia es la precisi\u00f3n de la se\u00f1al, que estar\u00e1 expuesta a la variabilidad del tiempo de respuesta del kernel (jitter). Este jitter puede llegar a medirse con un osciloscopio. Puede mejorarse utilizando un kernel de tiempo real y tareas de tiempo real.","title":"Control PWM en Linux"},{"location":"pwm_linux/#control-pwm-en-linux","text":"En esta pr\u00e1ctica vamos a estudiar c\u00f3mo podemos utilizar los controladores PWM desde un programa de usuario en Linux.","title":"Control PWM en Linux"},{"location":"pwm_linux/#senales-pwm","text":"Las se\u00f1ales de modulaci\u00f3n de ancho de pulso (Pulse Width Modulation, PWM) se describen en la siguiente figura: Se trata de una se\u00f1al rectangular de un periodo fijo, en la que la fracci\u00f3n del periodo en que la se\u00f1al toma un valor distinto de cero se define como duty cycle . Sin embargo, muchos interfaces de control PWM toman el duty cycle como el tiempo absoluto en que la se\u00f1al est\u00e1 activa, que debe ser menor que la duraci\u00f3n (absoluta) del periodo. Este tipo de se\u00f1ales se utilizan frecuentemente para el control de servos y la conversi\u00f3n digital anal\u00f3gica (en ausencia de DAC).","title":"Se\u00f1ales PWM"},{"location":"pwm_linux/#interfaz-sysfs","text":"En la raspberry pi hay dos controladores pwm hardware, con la misma se\u00f1al de reloj (19.2 MHz). Aunque puede obtenerse su salida por varios pines distintos, para la placa de expansi\u00f3n BEE es conveniente usar para el pwm0 el pin 18 o el pin 12 y para el pwm1 el pin 13. Los dos controladores son usados por el sistema de audio. El driver de pwm ofrece actualmente un interfaz a trav\u00e9s del sistema virtual de ficheros sysfs. Debe ser habilitado cargando el overlay pwm-2chan. Esto puede hacerse de dos formas: Din\u00e1micamente con: bash sudo dtoverlay pwm-2chan pin=18 func=2 pin2=13 func2=4 En arranque, si a\u00f1adimos al fichero \\texttt{config.txt} la l\u00ednea: bash dtoverlay=pwm-2chan,pin=18,func=2,pin2=13,func2=4 Una vez habilitado nos aparecer\u00e1 el directorio /sys/class/pwm/pwmchip0 con los siguientes ficheros: device, export, npwm, power, subsystem, uevent y unexport. Para poder usar los canales pwm primero hay que exportarlos escribiendo el n\u00famero del canal a usar en el fichero export: $ echo 0 > /sys/class/pwm/pwmchip0/export $ echo 1 > /sys/class/pwm/pwmchip0/export Una vez exportados nos aparecer\u00e1n dos nuevos directorios: pwm0 y pwm1 , con los siguientes ficheros: capture , duty_cycle , enable , period , polarity , power y uevent . El sistema genera un evento udev cuando aparecen y hay que esperar este evento para poder continuar (ver ejemplo). Una vez que se dispare el evento podemos usar un canal. Para ello debemos seguir el siguiente procedimiento: Escribir el periodo en ns en el fichero period Escribir el duty cycle en ns en el fichero duty_cycle Escribir un 1 en el fichero enable Podemos cambiar din\u00e1micamente el periodo y/o el duty cycle o apagar un canal escribiendo un 0 en el fichero enable . Cuando queramos dejar de usar un canal deberemos escribir su n\u00famero en el fichero unexport . Como ejemplo, el script bash servo_cont_rot.sh ofrece un interfaz de l\u00ednea de comandos para el control de un servo de rotaci\u00f3n continual de parallax. Si se dispone de uno de estos servos, se puede probar conect\u00e1ndolo a los pines indicados arriba. Podemos ejecutar el script sin par\u00e1metros o con -h para ver la lista de opciones. El programa servo_control.c es un ejemplo de como controlar el mismo servo de rotaci\u00f3n continua de parallax desde un programa C. Utiliza 3 pulsadores conectados a tres pines del gpio para controlar el servo. El programa recibe como argumentos: el fichero del controlador gpio, el canal de pwm a usar y los tres pines a usar como entrada. Uno de los botones permite decrementar el duty cycle, otro incrementarlo y otro parar el servo. El programa exporta el canal pwm indicado y espera a que el kernel notifique que est\u00e1 montado (esperando eventos de udev). Si el pwm ya est\u00e1 exportado da un aviso pero sigue adelante.","title":"Interfaz sysfs"},{"location":"pwm_linux/#pwm-por-software","text":"En lugar de utilizar controladores PWM hardware, es posible utilizar pines gen\u00e9ricos del GPIO para generar una se\u00f1al PWM por software. Si es posible, ser\u00eda mejor crear para ello una tarea de tiempo real, aunque esto queda fuera del alcance de esta pr\u00e1ctica. Tenemos dos alternativas: Usar clock_nanosleep con el flag TIMER_ABSTIME , usando dos intervalos, uno para el periodo y otro para el duty cycle. De esta forma, se espera ( clock_nanosleep ) un periodo, Usar timers POSIX, con un timer peri\u00f3dico para el periodo y uno one shot para el duty cycle, activado en cada periodo. Probar estas alternativas se deja como ejercicio al estudiante interesado. La limitaci\u00f3n de esta estrategia es la precisi\u00f3n de la se\u00f1al, que estar\u00e1 expuesta a la variabilidad del tiempo de respuesta del kernel (jitter). Este jitter puede llegar a medirse con un osciloscopio. Puede mejorarse utilizando un kernel de tiempo real y tareas de tiempo real.","title":"PWM por software"},{"location":"spi_linux/","text":"Control de dispositivos SPI En esta pr\u00e1ctica vamos a ver c\u00f3mo podemos manejar dispositivos conectados al controlador spi utilizando el driver spi de Linux. Comenzaremos recordando brevemente el funcionamiento del bus spi, ya que es necesario entenrlo para manejar el driver y los dispositivos. Al final probaremos lo que hemos aprendido utilizando el ADC incluido en la placa BEE. Bus SPI El Serial Peripheral Interface (SPI) es un bus serie s\u00edncrono y bidirccional muy utilizado en sistemas empotrados para conectar un microcontrolador a sus perif\u00e9ricos. Puede trabajar con frecuencias de 1 a 20 MHz, pero s\u00f3lo un dispositivo puede ser m\u00e1ster del bus. El bus utiliza 4 l\u00edneas m\u00e1s una tierra com\u00fan: Master out/Slave in ( MOSI , SDI ) Master in/Slave out ( MISO , SDO ) Serial clock ( SCK ) Slave Select ( nSS ): activo a baja Los dispositivos SPI pueden funcionar en dos modos Master : es el que puede iniciar y controlar una transferencia Slave : es el que se comunica con un master que le active El m\u00e1ster selecciona al slave con el que quiere comunicarse activando su se\u00f1al SS (poni\u00e9ndola a 0). Si un dispositivo puede hacer de m\u00e1ster o slave, puede configurar el pin nSS como entrada para ver si otro m\u00f3dulo est\u00e1 actuando como master. Si se detecta otro m\u00e1ster el dispositivo debe configurarse en modo slave. En SPI el env\u00edo y la recepci\u00f3n suceden simult\u00e1neamente, el bus funciona como un registro de desplazamiento circular distribuido. Se suele utilizar un sistema de doble buffer. El master y el slave tienen un registro de datos de 8 bits utilizado por el software para escribir el dato a transmitir o leer el dato recibido. Tambi\u00e9n disponen de un registro de desplazamiento de 8 bits. El procediminto de transmisi\u00f3n se ilustra en la figura de abajo. Pongamos por ejemplo que el master quiere env\u00edar un byte a un esclavo. Para transmitir se empieza copiando el dato en el registro de datos, que despu\u00e9s se copia en el registro de desplazamiento. Luego, en cada pulso de la se\u00f1al SCK (generada por el m\u00e1ster) se desplaza una posici\u00f3n el contenido de \u00e9ste registro, enviando as\u00ed por la l\u00ednea MOSI un bit. El esclavo hace el mismo desplazamiento, enviando a su vez un bit al master por la linea MISO. Ambos dispositivos usan el bit recibido como bit de relleno de su registro de desplazamiento. Este procedimiento contin\u00faa hasta que se hayan transmitido los 8 bits. Es configurable si se rellena por el bit m\u00e1s significativo (MSB) o menos significativo (LSB). SPI tiene esencialmente dos modos de transmisi\u00f3n, ilustrados en la figura de abajo, que son: CPHA = 0: El slave puede poner el primer bit en MISO en cuanto es seleccionado Los bits son latcheados/capturados en flancos impares de SCK El shifter se desplaza en flancos pares de SCK , rellenando con el bit capturado y transmitiendo as\u00ed un nuevo bit CPHA = 1: El slave necesita un flanco en SCK para poner el primer bit en MISO Los bits son latcheados/capturados en flancos pares de SCK El shifter se desplaza en flancos impares de SCK , rellenando con el bit capturado y transmitiendo as\u00ed un nuevo bit Estos dos modos tienen a su vez dos variantes que determinan la polaridad de SCK : - CPOL = 0 : SCK activo a alta, inactivo a baja - CPOL = 1 : SCK activo a baja, inactivo a alta Driver SPI en Linux Linux proporciona un driver spi gen\u00e9rico, que expone controladores como dispositivos de caracteres ( /dev/spidev#.# ). Para realizar una transmisi\u00f3n, lo primero es abrir el fichero de dispositivo. Despu\u00e9s usaremos una serie de operaciones ioctl para configurar el modo de transmisi\u00f3n requerido por el dispositivo: SPI_IOC_RD_MODE , SPI_IOC_WR_MODE : recibe un puntero a byte para leer o escribir el modo de transmisi\u00f3n b\u00e1sico. Los valores v\u00e1lidos son: SPI_MODE_{0,1,2,3} SPI_IOC_RD_LSB_FIRST , SPI_IOC_WR_LSB_FIRST : recibe un puntero a byte para leer o escribir el bit order. Un valor 0 es MSB first y cualquier otro valor es LSB first. SPI_IOC_RD_BITS_PER_WORD , SPI_IOC_WR_BITS_PER_WORD : recibe un puntero a byte, para leer o escribir el n\u00famero de bits en cada palabra spi transferida. Un valor 0 significa 8 bits. PI_IOC_RD_MAX_SPEED_HZ , SPI_IOC_WR_MAX_SPEED_HZ : recibe un puntero a uint32 para leer o escribir la frecuencia de transmisi\u00f3n. Una vez configurado el modo de transmisi\u00f3n, usaremos una operaci\u00f3n SPI_IOC_MESSAGE(n) para realizar env\u00edo y recepci\u00f3n simult\u00e1neos. Esta operaci\u00f3n recibe un puntero a un array de n elementos del tipo struct spi_ioc_transfer : struct spi_ioc_transfer { __u64 tx_buf; // direcci\u00f3n del buffer para transmision __u64 rx_buf; // direcci\u00f3n del buffer para recepci\u00f3n __u32 len; // longitud de tx_buf y rx_buf __u32 speed_hz;// velocidad para esta transferencia __u16 delay_usecs; // retardo para subir nCS __u8 bits_per_word; // bits por palabra __u8 cs_change; // subir nCS entre medias __u8 tx_nbits; // num de bits a transmitir __u8 rx_nbits; // num de bits a recibir __u8 word_delay_usecs; // retardo entre palabras __u8 pad; }; Ejemplos: MCP3008 y DAC MCP4911 El MCP3008 es un ADC de 10 bits y 8 canales, que pueden ser utilizados en modo diferencial o en modo independiente. Este ADC tiene un interfaz SPI. La placa BEE tiene montado uno de estos ADCs, que podemos conectar a la Raspberry Pi a trav\u00e9s de los jumpers en la tira de pines J2. La siguiente figura muestra un cronograma de una comunicaci\u00f3n SPI entre un microcontrolador y el ADC, extra\u00edda de la hoja de caracter\u00edsticas del MCP3008 ( datasheet ) proporcionada por el fabricante: El siguiente c\u00f3digo es un ejemplo de c\u00f3mo leer el ADC utilizando el driver SPI explicado arriba, siguiendo las directrices del cronograma: #define MCP3008_START 0x1 #define MCP3008_SIGL_DIFF (0x1 << 7) __u8 spi_mode = (__u8) SPI_MODE_0; int channel = 0; struct spi_ioc_transfer xfer[1]; unsigned char buf[3]; int adcval; fd = open(\"/dev/spidev0.0\", O_RDWR); ioctl(fd, SPI_IOC_WR_MODE, &spi_mode); memset(xfer, 0, sizeof xfer); memset(buf, 0, sizeof buf); buf[0] = MCP3008_START; buf[1] = MCP3008_SIGL_DIFF | ((channel & 0x7) << 4); xfer[0].tx_buf = (__u64) buf; xfer[0].rx_buf = (__u64) buf; xfer[0].len = sizeof buf; xfer[0].speed_hz = 1350000; //1.35 MHz ioctl(fd, SPI_IOC_MESSAGE(1), xfer); adcval = ((buf[1] & 0x3) << 8) | buf[2]; El programa adc_read.c lee una vez por segundo el valor de uno de los canales del adc de la placa BEE y muestra la tensi\u00f3n correspondiente a la medida por la salida est\u00e1ndar. Para usarlo podemos ejecutar el programa con los siguientes par\u00e1metros: ./adc_read /dev/spidev0.0 0 3300 /dev/spidev0.0 : es el controlador spi a usar 0 : el canal del adc que leer 3300 : la tensi\u00f3n vdd que alimenta al ADC en mV. El programa dac_follow_adc.c es similar al anterior, pero adem\u00e1s copia en el dac el valor le\u00eddo del adc, de modo que la salida del dac va siguiendo la entrada del adc. Para comprobar el funcionamiento de estos programas deben conectarse una serie de jumpers en la BEE: Jumpers en la tira de pines J2 Jumpers para selecci\u00f3n de VDD y VCC en J14 y J18 (escoger 3.3V) Jumper de tensi\u00f3n de referencia del ADC en J11. Jumper de tensi\u00f3n de referencia del DAC (no numerado). Jumper J9 de nLDAC.","title":"Control de dispositivos SPI"},{"location":"spi_linux/#control-de-dispositivos-spi","text":"En esta pr\u00e1ctica vamos a ver c\u00f3mo podemos manejar dispositivos conectados al controlador spi utilizando el driver spi de Linux. Comenzaremos recordando brevemente el funcionamiento del bus spi, ya que es necesario entenrlo para manejar el driver y los dispositivos. Al final probaremos lo que hemos aprendido utilizando el ADC incluido en la placa BEE.","title":"Control de dispositivos SPI"},{"location":"spi_linux/#bus-spi","text":"El Serial Peripheral Interface (SPI) es un bus serie s\u00edncrono y bidirccional muy utilizado en sistemas empotrados para conectar un microcontrolador a sus perif\u00e9ricos. Puede trabajar con frecuencias de 1 a 20 MHz, pero s\u00f3lo un dispositivo puede ser m\u00e1ster del bus. El bus utiliza 4 l\u00edneas m\u00e1s una tierra com\u00fan: Master out/Slave in ( MOSI , SDI ) Master in/Slave out ( MISO , SDO ) Serial clock ( SCK ) Slave Select ( nSS ): activo a baja Los dispositivos SPI pueden funcionar en dos modos Master : es el que puede iniciar y controlar una transferencia Slave : es el que se comunica con un master que le active El m\u00e1ster selecciona al slave con el que quiere comunicarse activando su se\u00f1al SS (poni\u00e9ndola a 0). Si un dispositivo puede hacer de m\u00e1ster o slave, puede configurar el pin nSS como entrada para ver si otro m\u00f3dulo est\u00e1 actuando como master. Si se detecta otro m\u00e1ster el dispositivo debe configurarse en modo slave. En SPI el env\u00edo y la recepci\u00f3n suceden simult\u00e1neamente, el bus funciona como un registro de desplazamiento circular distribuido. Se suele utilizar un sistema de doble buffer. El master y el slave tienen un registro de datos de 8 bits utilizado por el software para escribir el dato a transmitir o leer el dato recibido. Tambi\u00e9n disponen de un registro de desplazamiento de 8 bits. El procediminto de transmisi\u00f3n se ilustra en la figura de abajo. Pongamos por ejemplo que el master quiere env\u00edar un byte a un esclavo. Para transmitir se empieza copiando el dato en el registro de datos, que despu\u00e9s se copia en el registro de desplazamiento. Luego, en cada pulso de la se\u00f1al SCK (generada por el m\u00e1ster) se desplaza una posici\u00f3n el contenido de \u00e9ste registro, enviando as\u00ed por la l\u00ednea MOSI un bit. El esclavo hace el mismo desplazamiento, enviando a su vez un bit al master por la linea MISO. Ambos dispositivos usan el bit recibido como bit de relleno de su registro de desplazamiento. Este procedimiento contin\u00faa hasta que se hayan transmitido los 8 bits. Es configurable si se rellena por el bit m\u00e1s significativo (MSB) o menos significativo (LSB). SPI tiene esencialmente dos modos de transmisi\u00f3n, ilustrados en la figura de abajo, que son: CPHA = 0: El slave puede poner el primer bit en MISO en cuanto es seleccionado Los bits son latcheados/capturados en flancos impares de SCK El shifter se desplaza en flancos pares de SCK , rellenando con el bit capturado y transmitiendo as\u00ed un nuevo bit CPHA = 1: El slave necesita un flanco en SCK para poner el primer bit en MISO Los bits son latcheados/capturados en flancos pares de SCK El shifter se desplaza en flancos impares de SCK , rellenando con el bit capturado y transmitiendo as\u00ed un nuevo bit Estos dos modos tienen a su vez dos variantes que determinan la polaridad de SCK : - CPOL = 0 : SCK activo a alta, inactivo a baja - CPOL = 1 : SCK activo a baja, inactivo a alta","title":"Bus SPI"},{"location":"spi_linux/#driver-spi-en-linux","text":"Linux proporciona un driver spi gen\u00e9rico, que expone controladores como dispositivos de caracteres ( /dev/spidev#.# ). Para realizar una transmisi\u00f3n, lo primero es abrir el fichero de dispositivo. Despu\u00e9s usaremos una serie de operaciones ioctl para configurar el modo de transmisi\u00f3n requerido por el dispositivo: SPI_IOC_RD_MODE , SPI_IOC_WR_MODE : recibe un puntero a byte para leer o escribir el modo de transmisi\u00f3n b\u00e1sico. Los valores v\u00e1lidos son: SPI_MODE_{0,1,2,3} SPI_IOC_RD_LSB_FIRST , SPI_IOC_WR_LSB_FIRST : recibe un puntero a byte para leer o escribir el bit order. Un valor 0 es MSB first y cualquier otro valor es LSB first. SPI_IOC_RD_BITS_PER_WORD , SPI_IOC_WR_BITS_PER_WORD : recibe un puntero a byte, para leer o escribir el n\u00famero de bits en cada palabra spi transferida. Un valor 0 significa 8 bits. PI_IOC_RD_MAX_SPEED_HZ , SPI_IOC_WR_MAX_SPEED_HZ : recibe un puntero a uint32 para leer o escribir la frecuencia de transmisi\u00f3n. Una vez configurado el modo de transmisi\u00f3n, usaremos una operaci\u00f3n SPI_IOC_MESSAGE(n) para realizar env\u00edo y recepci\u00f3n simult\u00e1neos. Esta operaci\u00f3n recibe un puntero a un array de n elementos del tipo struct spi_ioc_transfer : struct spi_ioc_transfer { __u64 tx_buf; // direcci\u00f3n del buffer para transmision __u64 rx_buf; // direcci\u00f3n del buffer para recepci\u00f3n __u32 len; // longitud de tx_buf y rx_buf __u32 speed_hz;// velocidad para esta transferencia __u16 delay_usecs; // retardo para subir nCS __u8 bits_per_word; // bits por palabra __u8 cs_change; // subir nCS entre medias __u8 tx_nbits; // num de bits a transmitir __u8 rx_nbits; // num de bits a recibir __u8 word_delay_usecs; // retardo entre palabras __u8 pad; };","title":"Driver SPI en Linux"},{"location":"spi_linux/#ejemplos-mcp3008-y-dac-mcp4911","text":"El MCP3008 es un ADC de 10 bits y 8 canales, que pueden ser utilizados en modo diferencial o en modo independiente. Este ADC tiene un interfaz SPI. La placa BEE tiene montado uno de estos ADCs, que podemos conectar a la Raspberry Pi a trav\u00e9s de los jumpers en la tira de pines J2. La siguiente figura muestra un cronograma de una comunicaci\u00f3n SPI entre un microcontrolador y el ADC, extra\u00edda de la hoja de caracter\u00edsticas del MCP3008 ( datasheet ) proporcionada por el fabricante: El siguiente c\u00f3digo es un ejemplo de c\u00f3mo leer el ADC utilizando el driver SPI explicado arriba, siguiendo las directrices del cronograma: #define MCP3008_START 0x1 #define MCP3008_SIGL_DIFF (0x1 << 7) __u8 spi_mode = (__u8) SPI_MODE_0; int channel = 0; struct spi_ioc_transfer xfer[1]; unsigned char buf[3]; int adcval; fd = open(\"/dev/spidev0.0\", O_RDWR); ioctl(fd, SPI_IOC_WR_MODE, &spi_mode); memset(xfer, 0, sizeof xfer); memset(buf, 0, sizeof buf); buf[0] = MCP3008_START; buf[1] = MCP3008_SIGL_DIFF | ((channel & 0x7) << 4); xfer[0].tx_buf = (__u64) buf; xfer[0].rx_buf = (__u64) buf; xfer[0].len = sizeof buf; xfer[0].speed_hz = 1350000; //1.35 MHz ioctl(fd, SPI_IOC_MESSAGE(1), xfer); adcval = ((buf[1] & 0x3) << 8) | buf[2]; El programa adc_read.c lee una vez por segundo el valor de uno de los canales del adc de la placa BEE y muestra la tensi\u00f3n correspondiente a la medida por la salida est\u00e1ndar. Para usarlo podemos ejecutar el programa con los siguientes par\u00e1metros: ./adc_read /dev/spidev0.0 0 3300 /dev/spidev0.0 : es el controlador spi a usar 0 : el canal del adc que leer 3300 : la tensi\u00f3n vdd que alimenta al ADC en mV. El programa dac_follow_adc.c es similar al anterior, pero adem\u00e1s copia en el dac el valor le\u00eddo del adc, de modo que la salida del dac va siguiendo la entrada del adc. Para comprobar el funcionamiento de estos programas deben conectarse una serie de jumpers en la BEE: Jumpers en la tira de pines J2 Jumpers para selecci\u00f3n de VDD y VCC en J14 y J18 (escoger 3.3V) Jumper de tensi\u00f3n de referencia del ADC en J11. Jumper de tensi\u00f3n de referencia del DAC (no numerado). Jumper J9 de nLDAC.","title":"Ejemplos: MCP3008 y DAC MCP4911"}]}